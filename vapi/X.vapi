/* X.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "X", lower_case_cprefix = "x_")]
namespace X {
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum ICCEncodingStyle {
		XStringStyle,
		XCompoundTextStyle,
		XTextStyle,
		XStdICCTextStyle,
		XUTF8StringStyle
	}
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum IMCaretDirection {
		XIMForwardChar,
		XIMBackwardChar,
		XIMForwardWord,
		XIMBackwardWord,
		XIMCaretUp,
		XIMCaretDown,
		XIMNextLine,
		XIMPreviousLine,
		XIMLineStart,
		XIMLineEnd,
		XIMAbsolutePosition,
		XIMDontChange
	}
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum IMCaretStyle {
		XIMIsInvisible,
		XIMIsPrimary,
		XIMIsSecondary
	}
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum IMStatusDataType {
		XIMTextType,
		XIMBitmapType
	}
	[CCode (cprefix = "XOMOrientation_", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum Orientation {
		LTR_TTB,
		RTL_TTB,
		TTB_LTR,
		TTB_RTL,
		Context
	}
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum rmBinding {
		XrmBindTightly,
		XrmBindLoosely
	}
	[CCode (cprefix = "", has_type_id = "0", cheader_filename = "X11/X.h")]
	public enum rmOptionKind {
		XrmoptionNoArg,
		XrmoptionIsArg,
		XrmoptionStickyArg,
		XrmoptionSepArg,
		XrmoptionResArg,
		XrmoptionSkipArg,
		XrmoptionSkipLine,
		XrmoptionSkipNArgs
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class AccContext {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Atom {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BITS16 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BITS32 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BOOL {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BOX {
		public short x1;
		public short x2;
		public short y1;
		public short y2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BYTE {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Box {
		public short x1;
		public short x2;
		public short y1;
		public short y2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BoxPtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class BoxRec {
		public short x1;
		public short x2;
		public short y1;
		public short y2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CARD16 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CARD32 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CARD64 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CARD8 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ClientPtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Colormap {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Cursor {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Depth {
		public int depth;
		public int nvisuals;
		public weak X.Visual visuals;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h", cname="Display")]
	public class Display {
		public weak X.ExtData ext_data;
		public void* free_funcs;
		public int fd;
		public int conn_checker;
		public int proto_major_version;
		public int proto_minor_version;
		public weak string vendor;
		public weak X.ID resource_base;
		public weak X.ID resource_mask;
		public weak X.ID resource_id;
		public int resource_shift;
		public weak GLib.Callback resource_alloc;
		public int byte_order;
		public int bitmap_unit;
		public int bitmap_pad;
		public int bitmap_bit_order;
		public int nformats;
		public weak X.ScreenFormat pixmap_format;
		public int vnumber;
		public int release;
		public void* head;
		public void* tail;
		public int qlen;
		public uint last_request_read;
		public uint request;
		public weak string last_req;
		public weak string buffer;
		public weak string bufptr;
		public weak string bufmax;
		public uint max_request_size;
		public void* db;
		public weak GLib.Callback synchandler;
		public weak string display_name;
		public int default_screen;
		public int nscreens;
		public weak X.Screen screens;
		public uint motion_buffer;
		public uint flags;
		public int min_keycode;
		public int max_keycode;
		public weak X.KeySym keysyms;
		public weak X.ModifierKeymap modifiermap;
		public int keysyms_per_keycode;
		public weak string xdefaults;
		public weak string scratch_buffer;
		public uint scratch_length;
		public int ext_number;
		public void* ext_procs;
		[NoArrayLength]
		public weak GLib.Callback[] event_vec;
		[NoArrayLength]
		public weak GLib.Callback[] wire_vec;
		public weak X.KeySym lock_meaning;
		public void* @lock;
		public void* async_handlers;
		public uint bigreq_size;
		public void* lock_fns;
		public weak GLib.Callback idlist_alloc;
		public void* key_bindings;
		public weak X.Font cursor_font;
		public void* atoms;
		public uint mode_switch;
		public uint num_lock;
		public void* context_db;
		public weak GLib.Callback error_vec;
		public void* cms;
		public void* im_filters;
		public void* qfree;
		public uint next_event_serial_num;
		public void* flushes;
		public void* im_fd_info;
		public int im_fd_length;
		public void* conn_watchers;
		public int watcher_count;
		public weak X.Pointer filedes;
		public weak GLib.Callback savedsynchandler;
		public weak X.ID resource_max;
		public int xcmisc_opcode;
		public void* xkb_info;
		public void* trans_conn;
		public void* xcb;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Drawable {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FSID {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Font {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FontPtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class GC {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class GContext {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class INT16 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class INT32 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class INT8 {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KEYCODE {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyButMask {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyCode {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeySym {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class LockInfoPtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Mask {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OSTimePtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class POINTBLOCK {
		[NoArrayLength]
		public weak X.Point[] pts;
		public void* next;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Pixmap {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class RECTANGLE {
		public short x;
		public short y;
		public short width;
		public short height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class REGION {
		public long size;
		public long numRects;
		public weak X.BOX rects;
		public weak X.BOX extents;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class RectanglePtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class RectangleRec {
		public short x;
		public short y;
		public short width;
		public short height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Region {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h", cname="Screen")]
	public class Screen {
		public weak X.ExtData ext_data;
		public void* display;
		public weak X.Window root;
		public int width;
		public int height;
		public int mwidth;
		public int mheight;
		public int ndepths;
		public weak X.Depth depths;
		public int root_depth;
		public weak X.Visual root_visual;
		public int default_gc;
		public weak X.Colormap cmap;
		public uint white_pixel;
		public uint black_pixel;
		public int max_maps;
		public int min_maps;
		public int backing_store;
		public int save_unders;
		public long root_input_mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ScreenFormat {
		public weak X.ExtData ext_data;
		public int depth;
		public int bits_per_pixel;
		public int scanline_pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Time {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Visual {
		public weak X.ExtData ext_data;
		public weak X.VisualID visualid;
		public int @class;
		public uint red_mask;
		public uint green_mask;
		public uint blue_mask;
		public int bits_per_rgb;
		public int map_entries;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class VisualID {
	}
	[CCode (cheader_filename = "X11/X.h", has_type_id = "false", cname="Window")]
    [SimpleType]
	public struct Window {
        public string to_string(string format="%w") 
        {
            return ((ulong)this).to_string();
        }
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class AnyEvent {
		public int type;
		public ulong serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Arc {
		public short x;
		public short y;
		public uint width;
		public uint height;
		public short angle1;
		public short angle2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ButtonEvent {
		public int type;
		public ulong serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Window root;
		public weak X.Window subwindow;
		public weak X.Time time;
		public int x;
		public int y;
		public int x_root;
		public int y_root;
		public uint state;
		public uint button;
		public int same_screen;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ButtonPressedEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ButtonReleasedEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Char2b {
		public uint byte1;
		public uint byte2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CharStruct {
		public short lbearing;
		public short rbearing;
		public short width;
		public short ascent;
		public short descent;
		public uint attributes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CirculateEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public int place;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CirculateRequestEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window parent;
		public weak X.Window window;
		public int place;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ClassHint {
		public weak string res_name;
		public weak string res_class;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ClientMessageEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Atom message_type;
		public int format;
		public void* data;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Color {
		public uint pixel;
		public uint red;
		public uint green;
		public uint blue;
		public weak string flags;
		public weak string pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ColormapEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Colormap colormap;
		public int @new;
		public int state;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ComposeStatus {
		public weak X.Pointer compose_ptr;
		public int chars_matched;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ConfigureEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public int x;
		public int y;
		public int width;
		public int height;
		public int border_width;
		public weak X.Window above;
		public int override_redirect;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ConfigureRequestEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window parent;
		public weak X.Window window;
		public int x;
		public int y;
		public int width;
		public int height;
		public int border_width;
		public weak X.Window above;
		public int detail;
		public uint value_mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Context {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CreateWindowEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window parent;
		public weak X.Window window;
		public int x;
		public int y;
		public int width;
		public int height;
		public int border_width;
		public int override_redirect;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class CrossingEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Window root;
		public weak X.Window subwindow;
		public weak X.Time time;
		public int x;
		public int y;
		public int x_root;
		public int y_root;
		public int mode;
		public int detail;
		public int same_screen;
		public int focus;
		public uint state;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class DestroyWindowEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class EnterWindowEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ErrorEvent {
		public int type;
		public weak X.Display display;
		public weak X.ID resourceid;
		public uint serial;
		public uint error_code;
		public uint request_code;
		public uint minor_code;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ExposeEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public int x;
		public int y;
		public int width;
		public int height;
		public int count;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ExtCodes {
		public int extension;
		public int major_opcode;
		public int first_event;
		public int first_error;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ExtData {
		public int number;
		public void* next;
		public weak GLib.Callback free_private;
		public weak X.Pointer private_data;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FocusChangeEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public int mode;
		public int detail;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FocusInEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FocusOutEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FontProp {
		public weak X.Atom name;
		public uint card32;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FontSet {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FontSetExtents {
		public weak X.Rectangle max_ink_extent;
		public weak X.Rectangle max_logical_extent;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class FontStruct {
		public weak X.ExtData ext_data;
		public weak X.Font fid;
		public uint direction;
		public uint min_char_or_byte2;
		public uint max_char_or_byte2;
		public uint min_byte1;
		public uint max_byte1;
		public int all_chars_exist;
		public uint default_char;
		public int n_properties;
		public weak X.FontProp properties;
		public weak X.CharStruct min_bounds;
		public weak X.CharStruct max_bounds;
		public weak X.CharStruct per_char;
		public int ascent;
		public int descent;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class GCValues {
		public int function;
		public uint plane_mask;
		public uint foreground;
		public uint background;
		public int line_width;
		public int line_style;
		public int cap_style;
		public int join_style;
		public int fill_style;
		public int fill_rule;
		public int arc_mode;
		public weak X.Pixmap tile;
		public weak X.Pixmap stipple;
		public int ts_x_origin;
		public int ts_y_origin;
		public weak X.Font font;
		public int subwindow_mode;
		public int graphics_exposures;
		public int clip_x_origin;
		public int clip_y_origin;
		public weak X.Pixmap clip_mask;
		public int dash_offset;
		public weak string dashes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class GraphicsExposeEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Drawable drawable;
		public int x;
		public int y;
		public int width;
		public int height;
		public int count;
		public int major_code;
		public int minor_code;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class GravityEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public int x;
		public int y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class HostAddress {
		public int family;
		public int length;
		public weak string address;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IC {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ICCallback {
		public weak X.Pointer client_data;
		public weak X.ICProc callback;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ID {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IM {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMCallback {
		public weak X.Pointer client_data;
		public weak X.IMProc callback;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMFeedback {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMHotKeyState {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMHotKeyTrigger {
		public weak X.KeySym keysym;
		public int modifier;
		public int modifier_mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMHotKeyTriggers {
		public int num_hot_key;
		public weak X.IMHotKeyTrigger key;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMPreeditCaretCallbackStruct {
		public int position;
		public X.IMCaretDirection direction;
		public X.IMCaretStyle style;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMPreeditDrawCallbackStruct {
		public int caret;
		public int chg_first;
		public int chg_length;
		public weak X.IMText text;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMPreeditState {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMPreeditStateNotifyCallbackStruct {
		public weak X.IMPreeditState state;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMResetState {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStatusDrawCallbackStruct {
		public X.IMStatusDataType type;
		public void* data;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionCallbackStruct {
		public weak X.IMStringConversionPosition position;
		public X.IMCaretDirection direction;
		public weak X.IMStringConversionOperation operation;
		public uint factor;
		public weak X.IMStringConversionText text;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionFeedback {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionOperation {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionPosition {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionText {
		public uint length;
		public weak X.IMStringConversionFeedback feedback;
		public int encoding_is_wchar;
		[CCode (cname = "string")]
		public void* str;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStringConversionType {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStyle {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMStyles {
		public uint count_styles;
		public weak X.IMStyle supported_styles;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMText {
		public uint length;
		public weak X.IMFeedback feedback;
		public int encoding_is_wchar;
		[CCode (cname = "string")]
		public void* str;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IMValuesList {
		public uint count_values;
		public weak string supported_values;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class IconSize {
		public int min_width;
		public int min_height;
		public int max_width;
		public int max_height;
		public int width_inc;
		public int height_inc;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h", free_function = "free")]
	public class Image {
		public int width;
		public int height;
		public int xoffset;
		public int format;
		public weak string data;
		public int byte_order;
		public int bitmap_unit;
		public int bitmap_bit_order;
		public int bitmap_pad;
		public int depth;
		public int bytes_per_line;
		public int bits_per_pixel;
		public uint red_mask;
		public uint green_mask;
		public uint blue_mask;
		public weak X.Pointer obdata;
		public void* f;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Window root;
		public weak X.Window subwindow;
		public weak X.Time time;
		public int x;
		public int y;
		public int x_root;
		public int y_root;
		public uint state;
		public uint keycode;
		public int same_screen;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyPressedEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyReleasedEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyboardControl {
		public int key_click_percent;
		public int bell_percent;
		public int bell_pitch;
		public int bell_duration;
		public int led;
		public int led_mode;
		public int key;
		public int auto_repeat_mode;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeyboardState {
		public int key_click_percent;
		public int bell_percent;
		public uint bell_pitch;
		public uint bell_duration;
		public uint led_mask;
		public int global_auto_repeat;
		[NoArrayLength]
		public weak string[] auto_repeats;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class KeymapEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		[NoArrayLength]
		public weak string[] key_vector;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class LeaveWindowEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class MapEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public int override_redirect;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class MapRequestEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window parent;
		public weak X.Window window;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class MappingEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public int request;
		public int first_keycode;
		public int count;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ModifierKeymap {
		public int max_keypermod;
		public weak X.KeyCode modifiermap;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class MotionEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Window root;
		public weak X.Window subwindow;
		public weak X.Time time;
		public int x;
		public int y;
		public int x_root;
		public int y_root;
		public uint state;
		public weak string is_hint;
		public int same_screen;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class NoExposeEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Drawable drawable;
		public int major_code;
		public int minor_code;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OC {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OM {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OMCharSetList {
		public int charset_count;
		public weak string charset_list;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OMFontInfo {
		public int num_font;
		public weak X.FontStruct font_struct_list;
		public weak string font_name_list;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class OMOrientation {
		public int num_orientation;
		public X.Orientation orientation;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class PixmapFormatValues {
		public int depth;
		public int bits_per_pixel;
		public int scanline_pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Point {
		public short x;
		public short y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Pointer {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class PointerMovedEvent {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class PropertyEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Atom atom;
		public weak X.Time time;
		public int state;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Rectangle {
		public short x;
		public short y;
		public uint width;
		public uint height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ReparentEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public weak X.Window parent;
		public int x;
		public int y;
		public int override_redirect;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ResizeRequestEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public int width;
		public int height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Segment {
		public short x1;
		public short y1;
		public short x2;
		public short y2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class SelectionClearEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public weak X.Atom selection;
		public weak X.Time time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class SelectionEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window requestor;
		public weak X.Atom selection;
		public weak X.Atom target;
		public weak X.Atom property;
		public weak X.Time time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class SelectionRequestEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window owner;
		public weak X.Window requestor;
		public weak X.Atom selection;
		public weak X.Atom target;
		public weak X.Atom property;
		public weak X.Time time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class ServerInterpretedAddress {
		public int typelength;
		public int valuelength;
		public weak string type;
		public weak string value;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class SetWindowAttributes {
		public weak X.Pixmap background_pixmap;
		public uint background_pixel;
		public weak X.Pixmap border_pixmap;
		public uint border_pixel;
		public int bit_gravity;
		public int win_gravity;
		public int backing_store;
		public uint backing_planes;
		public uint backing_pixel;
		public int save_under;
		public long event_mask;
		public long do_not_propagate_mask;
		public int override_redirect;
		public weak X.Colormap colormap;
		public weak X.Cursor cursor;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class SizeHints {
		public long flags;
		public int x;
		public int y;
		public int width;
		public int height;
		public int min_width;
		public int min_height;
		public int max_width;
		public int max_height;
		public int width_inc;
		public int height_inc;
		public void* min_aspect;
		public void* max_aspect;
		public int base_width;
		public int base_height;
		public int win_gravity;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class StandardColormap {
		public weak X.Colormap colormap;
		public uint red_max;
		public uint red_mult;
		public uint green_max;
		public uint green_mult;
		public uint blue_max;
		public uint blue_mult;
		public uint base_pixel;
		public weak X.VisualID visualid;
		public weak X.ID killid;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class TextItem {
		public weak string chars;
		public int nchars;
		public int delta;
		public weak X.Font font;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class TextItem16 {
		public weak X.Char2b chars;
		public int nchars;
		public int delta;
		public weak X.Font font;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class TextProperty {
		public uint value;
		public weak X.Atom encoding;
		public int format;
		public uint nitems;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class TimeCoord {
		public weak X.Time time;
		public short x;
		public short y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class UnmapEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window event;
		public weak X.Window window;
		public int from_configure;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class VaNestedList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class VisibilityEvent {
		public int type;
		public uint serial;
		public int send_event;
		public weak X.Display display;
		public weak X.Window window;
		public int state;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class VisualInfo {
		public weak X.Visual visual;
		public weak X.VisualID visualid;
		public int screen;
		public int depth;
		public int @class;
		public uint red_mask;
		public uint green_mask;
		public uint blue_mask;
		public int colormap_size;
		public int bits_per_rgb;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class WDColor {
		public weak X.CARD32 pixel;
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
		public weak X.CARD8 flags;
		public weak X.CARD8 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class WDFileHeader {
		public weak X.CARD32 header_size;
		public weak X.CARD32 file_version;
		public weak X.CARD32 pixmap_format;
		public weak X.CARD32 pixmap_depth;
		public weak X.CARD32 pixmap_width;
		public weak X.CARD32 pixmap_height;
		public weak X.CARD32 xoffset;
		public weak X.CARD32 byte_order;
		public weak X.CARD32 bitmap_unit;
		public weak X.CARD32 bitmap_bit_order;
		public weak X.CARD32 bitmap_pad;
		public weak X.CARD32 bits_per_pixel;
		public weak X.CARD32 bytes_per_line;
		public weak X.CARD32 visual_class;
		public weak X.CARD32 red_mask;
		public weak X.CARD32 green_mask;
		public weak X.CARD32 blue_mask;
		public weak X.CARD32 bits_per_rgb;
		public weak X.CARD32 colormap_entries;
		public weak X.CARD32 ncolors;
		public weak X.CARD32 window_width;
		public weak X.CARD32 window_height;
		public weak X.CARD32 window_x;
		public weak X.CARD32 window_y;
		public weak X.CARD32 window_bdrwidth;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class WMHints {
		public long flags;
		public int input;
		public int initial_state;
		public weak X.Pixmap icon_pixmap;
		public weak X.Window icon_window;
		public int icon_x;
		public int icon_y;
		public weak X.Pixmap icon_mask;
		public weak X.ID window_group;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class WindowAttributes {
		public int x;
		public int y;
		public int width;
		public int height;
		public int border_width;
		public int depth;
		public weak X.Visual visual;
		public weak X.Window root;
		public int @class;
		public int bit_gravity;
		public int win_gravity;
		public int backing_store;
		public uint backing_planes;
		public uint backing_pixel;
		public int save_under;
		public weak X.Colormap colormap;
		public int map_installed;
		public int map_state;
		public long all_event_masks;
		public long your_event_mask;
		public long do_not_propagate_mask;
		public int override_redirect;
		public weak X.Screen screen;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class WindowChanges {
		public int x;
		public int y;
		public int width;
		public int height;
		public int border_width;
		public weak X.Window sibling;
		public int stack_mode;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCCC {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCCCRec {
		public weak X.Display dpy;
		public int screenNumber;
		public weak X.Visual visual;
		public weak X.cmsColor clientWhitePt;
		public weak X.cmsCompressionProc gamutCompProc;
		public weak X.Pointer gamutCompClientData;
		public weak X.cmsWhiteAdjustProc whitePtAdjProc;
		public weak X.Pointer whitePtAdjClientData;
		public weak X.cmsPerScrnInfo pPerScrnInfo;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCIELab {
		public weak X.cmsFloat L_star;
		public weak X.cmsFloat a_star;
		public weak X.cmsFloat b_star;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCIELuv {
		public weak X.cmsFloat L_star;
		public weak X.cmsFloat u_star;
		public weak X.cmsFloat v_star;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCIEXYZ {
		public weak X.cmsFloat Y;
		public weak X.cmsFloat Z;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCIEuvY {
		public weak X.cmsFloat u_prime;
		public weak X.cmsFloat v_prime;
		public weak X.cmsFloat Y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsCIExyY {
		public weak X.cmsFloat x;
		public weak X.cmsFloat y;
		public weak X.cmsFloat Y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsRGBi {
		public weak X.cmsFloat red;
		public weak X.cmsFloat green;
		public weak X.cmsFloat blue;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsTekHVC {
		public weak X.cmsFloat H;
		public weak X.cmsFloat V;
		public weak X.cmsFloat C;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsColor {
		public void* spec;
		public uint pixel;
		public weak X.cmsColorFormat format;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsColorFormat {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsColorSpace {
		public weak string prefix;
		public weak X.cmsColorFormat id;
		public weak X.cmsParseStringProc parseString;
		public weak X.cmsFuncListPtr to_CIEXYZ;
		public weak X.cmsFuncListPtr from_CIEXYZ;
		public int inverse_flag;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsConversionProc {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsFloat {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsFuncListPtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsFunctionSet {
		public weak X.cmsColorSpace DDColorSpaces;
		public weak X.cmsScreenInitProc screenInitProc;
		public weak X.cmsScreenFreeProc screenFreeProc;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsPad {
		public weak X.cmsFloat pad0;
		public weak X.cmsFloat pad1;
		public weak X.cmsFloat pad2;
		public weak X.cmsFloat pad3;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsPerScrnInfo {
		public weak X.cmsColor screenWhitePt;
		public weak X.Pointer functionSet;
		public weak X.Pointer screenData;
		public uint state;
		[NoArrayLength]
		public weak string[] pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class cmsRGB {
		public uint red;
		public uint green;
		public uint blue;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class mbTextItem {
		public weak string chars;
		public int nchars;
		public int delta;
		public weak X.FontSet font_set;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmBindingList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmClass {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmClassList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmDatabase {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmHashBucket {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmHashTable {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmName {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmNameList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmOptionDescList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmOptionDescRec {
		public weak string option;
		public weak string specifier;
		public X.rmOptionKind argKind;
		public weak X.Pointer value;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmQuark {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmQuarkList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmRepresentation {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmSearchList {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmString {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmValue {
		public uint size;
		public weak X.Pointer addr;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class rmValuePtr {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class wcTextItem {
		public ulong chars;
		public int nchars;
		public int delta;
		public weak X.FontSet font_set;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class pointer {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorCellsReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nPixels;
		public weak X.CARD16 nMasks;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorCellsReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL contiguous;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD16 colors;
		public weak X.CARD16 planes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorPlanesReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nPixels;
		public weak X.CARD16 pad2;
		public weak X.CARD32 redMask;
		public weak X.CARD32 greenMask;
		public weak X.CARD32 blueMask;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorPlanesReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL contiguous;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD16 colors;
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pixel;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocColorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
		public weak X.CARD16 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocNamedColorReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pixel;
		public weak X.CARD16 exactRed;
		public weak X.CARD16 exactGreen;
		public weak X.CARD16 exactBlue;
		public weak X.CARD16 screenRed;
		public weak X.CARD16 screenGreen;
		public weak X.CARD16 screenBlue;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllocNamedColorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD16 nbytes;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xAllowEventsReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 mode;
		public weak X.CARD16 length;
		public weak X.CARD32 time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xArc {
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.INT16 angle1;
		public weak X.INT16 angle2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xBellReq {
		public weak X.CARD8 reqType;
		public weak X.INT8 percent;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeActivePointerGrabReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cursor;
		public weak X.CARD32 time;
		public weak X.CARD16 eventMask;
		public weak X.CARD16 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeGCReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 gc;
		public weak X.CARD32 mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeHostsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE mode;
		public weak X.CARD16 length;
		public weak X.CARD8 hostFamily;
		public weak X.BYTE pad;
		public weak X.CARD16 hostLength;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeKeyboardControlReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeKeyboardMappingReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 keyCodes;
		public weak X.CARD16 length;
		public weak X.CARD8 firstKeyCode;
		public weak X.CARD8 keySymsPerKeyCode;
		public weak X.CARD16 pad1;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeModeReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE mode;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangePointerControlReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.INT16 accelNum;
		public weak X.INT16 accelDenum;
		public weak X.INT16 threshold;
		public weak X.BOOL doAccel;
		public weak X.BOOL doThresh;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangePropertyReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 mode;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 property;
		public weak X.CARD32 type;
		public weak X.CARD8 format;
		[NoArrayLength]
		public weak X.BYTE[] pad;
		public weak X.CARD32 nUnits;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeSaveSetReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE mode;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xChangeWindowAttributesReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 valueMask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCharInfo {
		public weak X.INT16 leftSideBearing;
		public weak X.INT16 rightSideBearing;
		public weak X.INT16 characterWidth;
		public weak X.INT16 ascent;
		public weak X.INT16 descent;
		public weak X.CARD16 attributes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCirculateWindowReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 direction;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xClearAreaReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL exposures;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xColorItem {
		public weak X.CARD32 pixel;
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
		public weak X.CARD8 flags;
		public weak X.CARD8 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xConfigureWindowReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD16 mask;
		public weak X.CARD16 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xConnClientPrefix {
		public weak X.CARD8 byteOrder;
		public weak X.BYTE pad;
		public weak X.CARD16 majorVersion;
		public weak X.CARD16 minorVersion;
		public weak X.CARD16 nbytesAuthProto;
		public weak X.CARD16 nbytesAuthString;
		public weak X.CARD16 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xConnSetup {
		public weak X.CARD32 release;
		public weak X.CARD32 ridBase;
		public weak X.CARD32 ridMask;
		public weak X.CARD32 motionBufferSize;
		public weak X.CARD16 nbytesVendor;
		public weak X.CARD16 maxRequestSize;
		public weak X.CARD8 numRoots;
		public weak X.CARD8 numFormats;
		public weak X.CARD8 imageByteOrder;
		public weak X.CARD8 bitmapBitOrder;
		public weak X.CARD8 bitmapScanlineUnit;
		public weak X.CARD8 bitmapScanlinePad;
		public weak X.CARD8 minKeyCode;
		public weak X.CARD8 maxKeyCode;
		public weak X.CARD32 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xConnSetupPrefix {
		public weak X.CARD8 success;
		public weak X.BYTE lengthReason;
		public weak X.CARD16 majorVersion;
		public weak X.CARD16 minorVersion;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xConvertSelectionReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 requestor;
		public weak X.CARD32 selection;
		public weak X.CARD32 target;
		public weak X.CARD32 property;
		public weak X.CARD32 time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCopyAreaReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 srcDrawable;
		public weak X.CARD32 dstDrawable;
		public weak X.CARD32 gc;
		public weak X.INT16 srcX;
		public weak X.INT16 srcY;
		public weak X.INT16 dstX;
		public weak X.INT16 dstY;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCopyColormapAndFreeReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 mid;
		public weak X.CARD32 srcCmap;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCopyGCReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 srcGC;
		public weak X.CARD32 dstGC;
		public weak X.CARD32 mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCopyPlaneReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 srcDrawable;
		public weak X.CARD32 dstDrawable;
		public weak X.CARD32 gc;
		public weak X.INT16 srcX;
		public weak X.INT16 srcY;
		public weak X.INT16 dstX;
		public weak X.INT16 dstY;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.CARD32 bitPlane;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreateColormapReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE alloc;
		public weak X.CARD16 length;
		public weak X.CARD32 mid;
		public weak X.CARD32 window;
		public weak X.CARD32 visual;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreateCursorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cid;
		public weak X.CARD32 source;
		public weak X.CARD32 mask;
		public weak X.CARD16 foreRed;
		public weak X.CARD16 foreGreen;
		public weak X.CARD16 foreBlue;
		public weak X.CARD16 backRed;
		public weak X.CARD16 backGreen;
		public weak X.CARD16 backBlue;
		public weak X.CARD16 x;
		public weak X.CARD16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreateGCReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 gc;
		public weak X.CARD32 drawable;
		public weak X.CARD32 mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreateGlyphCursorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cid;
		public weak X.CARD32 source;
		public weak X.CARD32 mask;
		public weak X.CARD16 sourceChar;
		public weak X.CARD16 maskChar;
		public weak X.CARD16 foreRed;
		public weak X.CARD16 foreGreen;
		public weak X.CARD16 foreBlue;
		public weak X.CARD16 backRed;
		public weak X.CARD16 backGreen;
		public weak X.CARD16 backBlue;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreatePixmapReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 depth;
		public weak X.CARD16 length;
		public weak X.CARD32 pid;
		public weak X.CARD32 drawable;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xCreateWindowReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 depth;
		public weak X.CARD16 length;
		public weak X.CARD32 wid;
		public weak X.CARD32 parent;
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.CARD16 borderWidth;
		public weak X.CARD16 @class;
		public weak X.CARD32 visual;
		public weak X.CARD32 mask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xDeletePropertyReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 property;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xDepth {
		public weak X.CARD8 depth;
		public weak X.CARD8 pad1;
		public weak X.CARD16 nVisuals;
		public weak X.CARD32 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xError {
		public weak X.BYTE type;
		public weak X.BYTE errorCode;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 resourceID;
		public weak X.CARD16 minorCode;
		public weak X.CARD8 majorCode;
		public weak X.BYTE pad1;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xEvent {
		public void* u;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xFillPolyReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
		public weak X.BYTE shape;
		public weak X.BYTE coordMode;
		public weak X.CARD16 pad1;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xFontProp {
		public weak X.CARD32 name;
		public weak X.CARD32 value;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xForceScreenSaverReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xFreeColorsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD32 planeMask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGenericReply {
		public weak X.BYTE type;
		public weak X.BYTE data1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 data00;
		public weak X.CARD32 data01;
		public weak X.CARD32 data02;
		public weak X.CARD32 data03;
		public weak X.CARD32 data04;
		public weak X.CARD32 data05;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetAtomNameReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nameLength;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetFontPathReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nPaths;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetGeometryReply {
		public weak X.BYTE type;
		public weak X.CARD8 depth;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 root;
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.CARD16 borderWidth;
		public weak X.CARD16 pad1;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetImageReply {
		public weak X.BYTE type;
		public weak X.CARD8 depth;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 visual;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetImageReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 format;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.CARD32 planeMask;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetInputFocusReply {
		public weak X.BYTE type;
		public weak X.CARD8 revertTo;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 focus;
		public weak X.CARD32 pad1;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetKeyboardControlReply {
		public weak X.BYTE type;
		public weak X.BOOL globalAutoRepeat;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 ledMask;
		public weak X.CARD8 keyClickPercent;
		public weak X.CARD8 bellPercent;
		public weak X.CARD16 bellPitch;
		public weak X.CARD16 bellDuration;
		public weak X.CARD16 pad;
		[NoArrayLength]
		public weak X.BYTE[] map;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetKeyboardMappingReply {
		public weak X.BYTE type;
		public weak X.CARD8 keySymsPerKeyCode;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetKeyboardMappingReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD8 firstKeyCode;
		public weak X.CARD8 count;
		public weak X.CARD16 pad1;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetModifierMappingReply {
		public weak X.BYTE type;
		public weak X.CARD8 numKeyPerModifier;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad1;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetMotionEventsReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 nEvents;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetMotionEventsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 start;
		public weak X.CARD32 stop;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetPointerControlReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 accelNumerator;
		public weak X.CARD16 accelDenominator;
		public weak X.CARD16 threshold;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetPointerMappingReply {
		public weak X.BYTE type;
		public weak X.CARD8 nElts;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetPropertyReply {
		public weak X.BYTE type;
		public weak X.CARD8 format;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 propertyType;
		public weak X.CARD32 bytesAfter;
		public weak X.CARD32 nItems;
		public weak X.CARD32 pad1;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetPropertyReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL @delete;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 property;
		public weak X.CARD32 type;
		public weak X.CARD32 longOffset;
		public weak X.CARD32 longLength;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetScreenSaverReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 timeout;
		public weak X.CARD16 interval;
		public weak X.BOOL preferBlanking;
		public weak X.BOOL allowExposures;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetSelectionOwnerReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 owner;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGetWindowAttributesReply {
		public weak X.BYTE type;
		public weak X.CARD8 backingStore;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 visualID;
		public weak X.CARD16 @class;
		public weak X.CARD8 bitGravity;
		public weak X.CARD8 winGravity;
		public weak X.CARD32 backingBitPlanes;
		public weak X.CARD32 backingPixel;
		public weak X.BOOL saveUnder;
		public weak X.BOOL mapInstalled;
		public weak X.CARD8 mapState;
		public weak X.BOOL override;
		public weak X.CARD32 colormap;
		public weak X.CARD32 allEventMasks;
		public weak X.CARD32 yourEventMask;
		public weak X.CARD16 doNotPropagateMask;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabButtonReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL ownerEvents;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD16 eventMask;
		public weak X.BYTE pointerMode;
		public weak X.BYTE keyboardMode;
		public weak X.CARD32 confineTo;
		public weak X.CARD32 cursor;
		public weak X.CARD8 button;
		public weak X.BYTE pad;
		public weak X.CARD16 modifiers;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabKeyReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL ownerEvents;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD16 modifiers;
		public weak X.CARD8 key;
		public weak X.BYTE pointerMode;
		public weak X.BYTE keyboardMode;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
		public weak X.BYTE pad3;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabKeyboardReply {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabKeyboardReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL ownerEvents;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD32 time;
		public weak X.BYTE pointerMode;
		public weak X.BYTE keyboardMode;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabPointerReply {
		public weak X.BYTE type;
		public weak X.BYTE status;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad1;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xGrabPointerReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL ownerEvents;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD16 eventMask;
		public weak X.BYTE pointerMode;
		public weak X.BYTE keyboardMode;
		public weak X.CARD32 confineTo;
		public weak X.CARD32 cursor;
		public weak X.CARD32 time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xHostEntry {
		public weak X.CARD8 family;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xImageText16Req {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xImageText8Req {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xImageTextReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE nChars;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
		public weak X.INT16 x;
		public weak X.INT16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xInternAtomReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 atom;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xInternAtomReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL onlyIfExists;
		public weak X.CARD16 length;
		public weak X.CARD16 nbytes;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xKeymapEvent {
		public weak X.BYTE type;
		[NoArrayLength]
		public weak X.BYTE[] map;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListExtensionsReply {
		public weak X.BYTE type;
		public weak X.CARD8 nExtensions;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListFontsReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nFonts;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListFontsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD16 maxNames;
		public weak X.CARD16 nbytes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListFontsWithInfoReply {
		public weak X.BYTE type;
		public weak X.CARD8 nameLength;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.xCharInfo minBounds;
		public weak X.CARD32 walign1;
		public weak X.xCharInfo maxBounds;
		public weak X.CARD32 walign2;
		public weak X.CARD16 minCharOrByte2;
		public weak X.CARD16 maxCharOrByte2;
		public weak X.CARD16 defaultChar;
		public weak X.CARD16 nFontProps;
		public weak X.CARD8 drawDirection;
		public weak X.CARD8 minByte1;
		public weak X.CARD8 maxByte1;
		public weak X.BOOL allCharsExist;
		public weak X.INT16 fontAscent;
		public weak X.INT16 fontDescent;
		public weak X.CARD32 nReplies;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListFontsWithInfoReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListHostsReply {
		public weak X.BYTE type;
		public weak X.BOOL enabled;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nHosts;
		public weak X.CARD16 pad1;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListHostsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListInstalledColormapsReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nColormaps;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xListPropertiesReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nProperties;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xLookupColorReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 exactRed;
		public weak X.CARD16 exactGreen;
		public weak X.CARD16 exactBlue;
		public weak X.CARD16 screenRed;
		public weak X.CARD16 screenGreen;
		public weak X.CARD16 screenBlue;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xLookupColorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD16 nbytes;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xOpenFontReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 fid;
		public weak X.CARD16 nbytes;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPixmapFormat {
		public weak X.CARD8 depth;
		public weak X.CARD8 bitsPerPixel;
		public weak X.CARD8 scanLinePad;
		public weak X.CARD8 pad1;
		public weak X.CARD32 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPoint {
		public weak X.INT16 x;
		public weak X.INT16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyArcReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyFillArcReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyFillRectangleReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyLineReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyPointReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE coordMode;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyRectangleReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolySegmentReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyText16Req {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyText8Req {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPolyTextReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 pad;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
		public weak X.INT16 x;
		public weak X.INT16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xPutImageReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 format;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD32 gc;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.INT16 dstX;
		public weak X.INT16 dstY;
		public weak X.CARD8 leftPad;
		public weak X.CARD8 depth;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryBestSizeReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryBestSizeReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 @class;
		public weak X.CARD16 length;
		public weak X.CARD32 drawable;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryColorsReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD16 nColors;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryColorsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryExtensionReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.BOOL present;
		public weak X.CARD8 major_opcode;
		public weak X.CARD8 first_event;
		public weak X.CARD8 first_error;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryExtensionReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD16 nbytes;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryFontReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.xCharInfo minBounds;
		public weak X.CARD32 walign1;
		public weak X.xCharInfo maxBounds;
		public weak X.CARD32 walign2;
		public weak X.CARD16 minCharOrByte2;
		public weak X.CARD16 maxCharOrByte2;
		public weak X.CARD16 defaultChar;
		public weak X.CARD16 nFontProps;
		public weak X.CARD8 drawDirection;
		public weak X.CARD8 minByte1;
		public weak X.CARD8 maxByte1;
		public weak X.BOOL allCharsExist;
		public weak X.INT16 fontAscent;
		public weak X.INT16 fontDescent;
		public weak X.CARD32 nCharInfos;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryKeymapReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		[NoArrayLength]
		public weak X.BYTE[] map;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryPointerReply {
		public weak X.BYTE type;
		public weak X.BOOL sameScreen;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 root;
		public weak X.CARD32 child;
		public weak X.INT16 rootX;
		public weak X.INT16 rootY;
		public weak X.INT16 winX;
		public weak X.INT16 winY;
		public weak X.CARD16 mask;
		public weak X.CARD16 pad1;
		public weak X.CARD32 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryTextExtentsReply {
		public weak X.BYTE type;
		public weak X.CARD8 drawDirection;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.INT16 fontAscent;
		public weak X.INT16 fontDescent;
		public weak X.INT16 overallAscent;
		public weak X.INT16 overallDescent;
		public weak X.INT32 overallWidth;
		public weak X.INT32 overallLeft;
		public weak X.INT32 overallRight;
		public weak X.CARD32 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryTextExtentsReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL oddLength;
		public weak X.CARD16 length;
		public weak X.CARD32 fid;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xQueryTreeReply {
		public weak X.BYTE type;
		public weak X.BYTE pad1;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 root;
		public weak X.CARD32 parent;
		public weak X.CARD16 nChildren;
		public weak X.CARD16 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xRecolorCursorReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cursor;
		public weak X.CARD16 foreRed;
		public weak X.CARD16 foreGreen;
		public weak X.CARD16 foreBlue;
		public weak X.CARD16 backRed;
		public weak X.CARD16 backGreen;
		public weak X.CARD16 backBlue;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xRectangle {
		public weak X.INT16 x;
		public weak X.INT16 y;
		public weak X.CARD16 width;
		public weak X.CARD16 height;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xReparentWindowReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 parent;
		public weak X.INT16 x;
		public weak X.INT16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 data;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xResourceReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 id;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xRotatePropertiesReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD16 nAtoms;
		public weak X.INT16 nPositions;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSegment {
		public weak X.INT16 x1;
		public weak X.INT16 y1;
		public weak X.INT16 x2;
		public weak X.INT16 y2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSendEventReq {
		public weak X.CARD8 reqType;
		public weak X.BOOL propagate;
		public weak X.CARD16 length;
		public weak X.CARD32 destination;
		public weak X.CARD32 eventMask;
		public weak X.xEvent event;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetAccessControlReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetClipRectanglesReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE ordering;
		public weak X.CARD16 length;
		public weak X.CARD32 gc;
		public weak X.INT16 xOrigin;
		public weak X.INT16 yOrigin;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetCloseDownModeReq {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetDashesReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 gc;
		public weak X.CARD16 dashOffset;
		public weak X.CARD16 nDashes;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetFontPathReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD16 nFonts;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetInputFocusReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 revertTo;
		public weak X.CARD16 length;
		public weak X.CARD32 focus;
		public weak X.CARD32 time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetMappingReply {
		public weak X.BYTE type;
		public weak X.CARD8 success;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
		public weak X.CARD32 pad6;
		public weak X.CARD32 pad7;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetModifierMappingReply {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetModifierMappingReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 numKeyPerModifier;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetPointerMappingReply {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetPointerMappingReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 nElts;
		public weak X.CARD16 length;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetScreenSaverReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.INT16 timeout;
		public weak X.INT16 interval;
		public weak X.BYTE preferBlank;
		public weak X.BYTE allowExpose;
		public weak X.CARD16 pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xSetSelectionOwnerReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 window;
		public weak X.CARD32 selection;
		public weak X.CARD32 time;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xStoreColorsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xStoreNamedColorReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 flags;
		public weak X.CARD16 length;
		public weak X.CARD32 cmap;
		public weak X.CARD32 pixel;
		public weak X.CARD16 nbytes;
		public weak X.BYTE pad1;
		public weak X.BYTE pad2;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xTextElt {
		public weak X.CARD8 len;
		public weak X.INT8 delta;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xTimecoord {
		public weak X.CARD32 time;
		public weak X.INT16 x;
		public weak X.INT16 y;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xTranslateCoordsReply {
		public weak X.BYTE type;
		public weak X.BOOL sameScreen;
		public weak X.CARD16 sequenceNumber;
		public weak X.CARD32 length;
		public weak X.CARD32 child;
		public weak X.INT16 dstX;
		public weak X.INT16 dstY;
		public weak X.CARD32 pad2;
		public weak X.CARD32 pad3;
		public weak X.CARD32 pad4;
		public weak X.CARD32 pad5;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xTranslateCoordsReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 srcWid;
		public weak X.CARD32 dstWid;
		public weak X.INT16 srcX;
		public weak X.INT16 srcY;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xUngrabButtonReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 button;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD16 modifiers;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xUngrabKeyReq {
		public weak X.CARD8 reqType;
		public weak X.CARD8 key;
		public weak X.CARD16 length;
		public weak X.CARD32 grabWindow;
		public weak X.CARD16 modifiers;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xVisualType {
		public weak X.CARD32 visualID;
		public weak X.CARD8 @class;
		public weak X.CARD8 bitsPerRGB;
		public weak X.CARD16 colormapEntries;
		public weak X.CARD32 redMask;
		public weak X.CARD32 greenMask;
		public weak X.CARD32 blueMask;
		public weak X.CARD32 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xWarpPointerReq {
		public weak X.CARD8 reqType;
		public weak X.BYTE pad;
		public weak X.CARD16 length;
		public weak X.CARD32 srcWid;
		public weak X.CARD32 dstWid;
		public weak X.INT16 srcX;
		public weak X.INT16 srcY;
		public weak X.CARD16 srcWidth;
		public weak X.CARD16 srcHeight;
		public weak X.INT16 dstX;
		public weak X.INT16 dstY;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xWindowRoot {
		public weak X.CARD32 windowId;
		public weak X.CARD32 defaultColormap;
		public weak X.CARD32 whitePixel;
		public weak X.CARD32 blackPixel;
		public weak X.CARD32 currentInputMask;
		public weak X.CARD16 pixWidth;
		public weak X.CARD16 pixHeight;
		public weak X.CARD16 mmWidth;
		public weak X.CARD16 mmHeight;
		public weak X.CARD16 minInstalledMaps;
		public weak X.CARD16 maxInstalledMaps;
		public weak X.CARD32 rootVisualID;
		public weak X.CARD8 backingStore;
		public weak X.BOOL saveUnders;
		public weak X.CARD8 rootDepth;
		public weak X.CARD8 nDepths;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xcondition_rec {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xcondition_t {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xmutex_rec {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xmutex_t {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xrgb {
		public weak X.CARD16 red;
		public weak X.CARD16 green;
		public weak X.CARD16 blue;
		public weak X.CARD16 pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xthread_key_t {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xthread_t {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xwdval {
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class EDataObject {
		public weak X.Display display;
		public int gc;
		public weak X.Visual visual;
		public weak X.Screen screen;
		public weak X.ScreenFormat pixmap_format;
		public weak X.FontStruct font;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class Event {
		public int type;
		public weak X.AnyEvent xany;
		public weak X.KeyEvent xkey;
		public weak X.ButtonEvent xbutton;
		public weak X.MotionEvent xmotion;
		public weak X.CrossingEvent xcrossing;
		public weak X.FocusChangeEvent xfocus;
		public weak X.ExposeEvent xexpose;
		public weak X.GraphicsExposeEvent xgraphicsexpose;
		public weak X.NoExposeEvent xnoexpose;
		public weak X.VisibilityEvent xvisibility;
		public weak X.CreateWindowEvent xcreatewindow;
		public weak X.DestroyWindowEvent xdestroywindow;
		public weak X.UnmapEvent xunmap;
		public weak X.MapEvent xmap;
		public weak X.MapRequestEvent xmaprequest;
		public weak X.ReparentEvent xreparent;
		public weak X.ConfigureEvent xconfigure;
		public weak X.GravityEvent xgravity;
		public weak X.ResizeRequestEvent xresizerequest;
		public weak X.ConfigureRequestEvent xconfigurerequest;
		public weak X.CirculateEvent xcirculate;
		public weak X.CirculateRequestEvent xcirculaterequest;
		public weak X.PropertyEvent xproperty;
		public weak X.SelectionClearEvent xselectionclear;
		public weak X.SelectionRequestEvent xselectionrequest;
		public weak X.SelectionEvent xselection;
		public weak X.ColormapEvent xcolormap;
		public weak X.ClientMessageEvent xclient;
		public weak X.MappingEvent xmapping;
		public weak X.ErrorEvent xerror;
		public weak X.KeymapEvent xkeymap;
		[NoArrayLength]
		public weak long[] pad;
	}
	[Compact]
	[CCode (cheader_filename = "X11/X.h")]
	public class xReply {
		public weak X.xGenericReply generic;
		public weak X.xGetGeometryReply geom;
		public weak X.xQueryTreeReply tree;
		public weak X.xInternAtomReply atom;
		public weak X.xGetAtomNameReply atomName;
		public weak X.xGetPropertyReply property;
		public weak X.xListPropertiesReply listProperties;
		public weak X.xGetSelectionOwnerReply selection;
		public weak X.xGrabPointerReply grabPointer;
		public weak X.xGrabKeyboardReply grabKeyboard;
		public weak X.xQueryPointerReply pointer;
		public weak X.xGetMotionEventsReply motionEvents;
		public weak X.xTranslateCoordsReply coords;
		public weak X.xGetInputFocusReply inputFocus;
		public weak X.xQueryTextExtentsReply textExtents;
		public weak X.xListFontsReply fonts;
		public weak X.xGetFontPathReply fontPath;
		public weak X.xGetImageReply image;
		public weak X.xListInstalledColormapsReply colormaps;
		public weak X.xAllocColorReply allocColor;
		public weak X.xAllocNamedColorReply allocNamedColor;
		public weak X.xAllocColorCellsReply colorCells;
		public weak X.xAllocColorPlanesReply colorPlanes;
		public weak X.xQueryColorsReply colors;
		public weak X.xLookupColorReply lookupColor;
		public weak X.xQueryBestSizeReply bestSize;
		public weak X.xQueryExtensionReply extension;
		public weak X.xListExtensionsReply extensions;
		public weak X.xSetModifierMappingReply setModifierMapping;
		public weak X.xGetModifierMappingReply getModifierMapping;
		public weak X.xSetPointerMappingReply setPointerMapping;
		public weak X.xGetKeyboardMappingReply getKeyboardMapping;
		public weak X.xGetPointerMappingReply getPointerMapping;
		public weak X.xGetPointerControlReply pointerControl;
		public weak X.xGetScreenSaverReply screenSaver;
		public weak X.xListHostsReply hosts;
		public weak X.xError error;
		public weak X.xEvent event;
	}
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void BeforeFlushType (X.Display p1, X.ExtCodes p2, string p3, long p4);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void BlockHandlerProcPtr (X.pointer p1, X.OSTimePtr p2, X.pointer p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int CloseDisplayType (X.Display p1, X.ExtCodes p2);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int CopyGCType (X.Display p1, int p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int CreateFontType (X.Display p1, X.FontStruct p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int CreateGCType (X.Display p1, int p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate weak string ErrorStringType (X.Display p1, int p2, X.ExtCodes p3, string p4, int p5);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int ErrorType (X.Display p1, X.xError p2, X.ExtCodes p3, int p4);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int FlushGCType (X.Display p1, int p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int FreeFontType (X.Display p1, X.FontStruct p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void FreeFuncType (X.Display p1);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int FreeGCType (X.Display p1, int p2, X.ExtCodes p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int FreeModmapType (X.ModifierKeymap p1);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void PrintErrorType (X.Display p1, X.ErrorEvent p2, void* p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void ConnectionWatchProc (X.Display p1, X.Pointer p2, int p3, int p4, X.Pointer p5);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int ErrorHandler (X.Display p1, X.ErrorEvent p2);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int ICProc (X.IC p1, X.Pointer p2, X.Pointer p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void IDProc (X.Display p1, X.Pointer p2, X.Pointer p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void IMProc (X.IM p1, X.Pointer p2, X.Pointer p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int IOErrorHandler (X.Display p1);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsCompressionProc (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsDDConversionProc (X.cmsCCC p1, X.cmsColor p2, uint p3, int p4);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsDIConversionProc (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsParseStringProc (string p1, X.cmsColor p2);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate void cmsScreenFreeProc (X.Pointer p1);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsScreenInitProc (X.Display p1, int p2, X.cmsPerScrnInfo p3);
	[CCode (cheader_filename = "X11/X.h")]
	public static delegate int cmsWhiteAdjustProc (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, X.cmsColorFormat p4, X.cmsColor p5, uint p6, int p7);
	[CCode (cheader_filename = "X11/X.h")]
	public const int Above;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllHints;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllTemporary;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllValues;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocAll;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllowExposures;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AlreadyGrabbed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Always;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AnyButton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AnyKey;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AnyModifier;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AnyPropertyType;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ArcChord;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ArcPieSlice;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AsyncBoth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AsyncKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AsyncPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AutoRepeatModeDefault;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AutoRepeatModeOff;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AutoRepeatModeOn;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BUFSIZE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadAccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadAtom;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadDrawable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadFont;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadGC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadIDChoice;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadImplementation;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadLength;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadMatch;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadName;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BadWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Below;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BitmapFileInvalid;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BitmapNoMemory;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BitmapOpenFailed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BitmapSuccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BottomIf;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button1;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button1Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button1MotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button2;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button2Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button2MotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button3;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button3Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button3MotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button4;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button4Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button4MotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button5;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button5Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Button5MotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ButtonMotionMask;
	[CCode (cheader_filename = "X11/X.h", cname = "ButtonPress")]
	public const int ButtonPress;
	[CCode (cheader_filename = "X11/X.h", cname = "ButtonPressMask")]
	public const int ButtonPressMask;
	[CCode (cheader_filename = "X11/X.h", cname = "ButtonRelease")]
	public const int ButtonRelease;
	[CCode (cheader_filename = "X11/X.h", cname = "ButtonPressMask")]
	public const int ButtonReleaseMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const string CURSORFONT;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBackPixel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBackPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBackingPixel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBackingPlanes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBackingStore;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBitGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBorderPixel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBorderPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWBorderWidth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWDontPropagate;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWEventMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWHeight;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWOverrideRedirect;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWSaveUnder;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWSibling;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWStackMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWWidth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWWinGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWX;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CWY;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CapButt;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CapNotLast;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CapProjecting;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CapRound;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CenterGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CirculateNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CirculateRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ClientMessage;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ClipByChildren;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ColormapChangeMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ColormapInstalled;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ColormapNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ColormapUninstalled;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Complex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ConfigureNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ConfigureRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ControlMapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ControlMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Convex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CoordModeOrigin;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CoordModePrevious;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CurrentTime;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CursorShape;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DefaultBlanking;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DefaultExposures;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DestroyAll;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DestroyNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DirectColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DisableAccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DisableScreenInterval;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DisableScreenSaver;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DoBlue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DoGreen;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DoRed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DontAllowExposures;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DontCareState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DontPreferBlanking;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ELFlagFocus;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ELFlagSameScreen;
	[CCode (cheader_filename = "X11/X.h")]
	public const int EastGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int EnableAccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int EnterNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int EnterWindowMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int EvenOddRule;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Expose;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ExposureMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FALSE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FARCSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FD_SETSIZE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FRCTSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FUNCPROTO;
	[CCode (cheader_filename = "X11/X.h")]
	public const int False;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FamilyChaos;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FamilyDECnet;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FamilyInternet;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FamilyInternet6;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FamilyServerInterpreted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FillOpaqueStippled;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FillSolid;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FillStippled;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FillTiled;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FirstExtensionError;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FocusChangeMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FocusIn;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FocusOut;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FontChange;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FontLeftToRight;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FontRightToLeft;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ForgetGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCArcMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCBackground;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCCapStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCClipMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCClipXOrigin;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCClipYOrigin;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCDashList;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCDashOffset;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCFillRule;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCFillStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCFont;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCForeground;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCFunction;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCGraphicsExposures;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCJoinStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCLastBit;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCLineStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCLineWidth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCPlaneMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCStipple;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCSubwindowMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCTile;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCTileStipXOrigin;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GCTileStipYOrigin;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXand;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXandInverted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXandReverse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXclear;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXcopy;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXcopyInverted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXequiv;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXinvert;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXnand;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXnoop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXnor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXorInverted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXorReverse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXset;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GXxor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabFrozen;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabInvalidTime;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabModeAsync;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabModeSync;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabNotViewable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabSuccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GraphicsExpose;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GravityNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrayScale;
	[CCode (cheader_filename = "X11/X.h")]
	public const int HeightValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int HostDelete;
	[CCode (cheader_filename = "X11/X.h")]
	public const int HostInsert;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IconMaskHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IconPixmapHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IconPositionHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IconWindowHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IconicState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InactiveState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IncludeInferiors;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InputFocus;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InputHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InputOnly;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InputOutput;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IsUnmapped;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IsUnviewable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int IsViewable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int JoinBevel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int JoinMiter;
	[CCode (cheader_filename = "X11/X.h")]
	public const int JoinRound;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBAutoRepeatMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBBellDuration;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBBellPercent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBBellPitch;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBKey;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBKeyClickPercent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBLed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KBLedMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeyPress;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeyPressMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeyRelease;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeyReleaseMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeymapNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KeymapStateMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LASTEvent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_ALL;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_COLLATE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_CTYPE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_MONETARY;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_NUMERIC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LC_TIME;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LOCKED;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LSBFirst;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LastExtensionError;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LeaveNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LeaveWindowMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LedModeOff;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LedModeOn;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LineDoubleDash;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LineOnOffDash;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LineSolid;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LockMapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LockMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LowerHighest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MAXPATHLEN;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MAXSHORT;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MSBFirst;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MapNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MapRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingBusy;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingFailed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingModifier;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MappingSuccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod1MapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod1Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod2MapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod2Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod3MapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod3Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod4MapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod4Mask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod5MapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Mod5Mask;
	[CCode (cheader_filename = "X11/X.h", cname = "MotionNotify")]
	public const int MotionNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NBBY;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NFDBITS;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NGROUPS;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NUMPTSTOBUFFER;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NeedFunctionPrototypes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NeedNestedPrototypes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NeedVarargsPrototypes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NeedWidePrototypes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NoEventMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NoExpose;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NoSymbol;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NoValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Nonconvex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int None;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NormalState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NorthEastGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NorthGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NorthWestGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotUseful;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyAncestor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyDetailNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyGrab;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyInferior;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyNonlinear;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyNonlinearVirtual;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyNormal;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyPointerRoot;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyUngrab;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyVirtual;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NotifyWhileGrabbed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int OPEN_MAX;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Opposite;
	[CCode (cheader_filename = "X11/X.h")]
	public const int OwnerGrabButtonMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PATH_MAX;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PAllHints;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PAspect;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PBaseSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PMaxSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PMinSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PPosition;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PResizeInc;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PTSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PWinGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ParentRelative;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PlaceOnBottom;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PlaceOnTop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PointerMotionHintMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PointerMotionMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PointerRoot;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PreferBlanking;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropModeAppend;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropModePrepend;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropModeReplace;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropertyChangeMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropertyDelete;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropertyNewValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PropertyNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PseudoColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueuedAfterFlush;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueuedAfterReading;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueuedAlready;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RaiseLowest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RectangleIn;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RectangleOut;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RectanglePart;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ReparentNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ReplayKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ReplayPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ResizeRedirectMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ResizeRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RetainPermanent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RetainTemporary;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RevertToParent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SVR4;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ScreenSaverActive;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ScreenSaverReset;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SelectionClear;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SelectionNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SelectionRequest;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetModeDelete;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetModeInsert;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ShiftMapIndex;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ShiftMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SouthEastGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SouthGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SouthWestGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StateHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StaticColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StaticGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StaticGray;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StippleShape;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StructureNotifyMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SubstructureNotifyMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SubstructureRedirectMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Success;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SyncBoth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SyncKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SyncPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TRUE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TileShape;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TopIf;
	[CCode (cheader_filename = "X11/X.h")]
	public const int True;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TrueColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UNLOCKED;
	[CCode (cheader_filename = "X11/X.h")]
	public const int USPosition;
	[CCode (cheader_filename = "X11/X.h")]
	public const int USSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UnmapGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UnmapNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Unsorted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisibilityChangeMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisibilityFullyObscured;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisibilityNotify;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisibilityPartiallyObscured;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisibilityUnobscured;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualAllMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualBitsPerRGBMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualBlueMaskMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualClassMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualColormapSizeMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualDepthMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualGreenMaskMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualIDMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualNoMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualRedMaskMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int VisualScreenMask;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WLNSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WRCTSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WestGravity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WhenMapped;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WidthValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WindingRule;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WindowGroupHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WithdrawnState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XALLOCA_H;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XATOM_H;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XBufferOverflow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XCNOENT;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XCNOMEM;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XCONN_CHECK_FREQ;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XCSUCCESS;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_X_cursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_based_arrow_down;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_based_arrow_up;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_boat;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_bogosity;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_bottom_left_corner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_bottom_right_corner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_bottom_side;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_bottom_tee;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_box_spiral;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_center_ptr;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_circle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_clock;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_coffee_mug;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_cross;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_cross_reverse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_crosshair;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_diamond_cross;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_dot;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_dotbox;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_double_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_draft_large;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_draft_small;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_draped_box;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_exchange;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_fleur;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_gobbler;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_gumby;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_hand1;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_hand2;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_heart;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_icon;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_iron_cross;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_left_ptr;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_left_side;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_left_tee;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_leftbutton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_ll_angle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_lr_angle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_man;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_middlebutton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_mouse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_num_glyphs;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_pencil;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_pirate;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_plus;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_question_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_right_ptr;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_right_side;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_right_tee;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_rightbutton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_rtl_logo;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sailboat;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_down_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_h_double_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_left_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_right_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_up_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sb_v_double_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_shuttle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_sizing;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_spider;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_spraycan;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_star;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_target;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_tcross;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_top_left_arrow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_top_left_corner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_top_right_corner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_top_side;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_top_tee;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_trek;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_ul_angle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_umbrella;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_ur_angle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_watch;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XC_xterm;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XConverterNotFound;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AddFavorite;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ApplicationLeft;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ApplicationRight;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioLowerVolume;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioMedia;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioMute;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioNext;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioPause;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioPlay;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioPrev;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioRaiseVolume;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioRecord;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioRewind;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_AudioStop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Away;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Back;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Book;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_BrightnessAdjust;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_CD;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Calculater;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Calculator;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Calendar;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Clear;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ClearGrab;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Close;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Community;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ContrastAdjust;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Copy;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Cut;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_DOS;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Display;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Documents;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Eject;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Excel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Explorer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Favorites;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Finance;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Forward;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Game;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Go;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_History;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_HomePage;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_HotLinks;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_KbdBrightnessDown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_KbdBrightnessUp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_KbdLightOnOff;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch0;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch1;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch2;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch3;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch4;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch5;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch6;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch7;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch8;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Launch9;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchA;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchD;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LaunchF;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LightBulb;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_LogOff;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Mail;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MailForward;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Market;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Meeting;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Memo;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MenuKB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MenuPB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Messenger;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ModeLock;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MonBrightnessDown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MonBrightnessUp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Music;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MyComputer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_MySites;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_New;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_News;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Next_VMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_OfficeHome;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Open;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_OpenURL;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Option;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Paste;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Phone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Pictures;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_PowerDown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_PowerOff;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Prev_VMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Q;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Refresh;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Reload;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Reply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RockerDown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RockerEnter;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RockerUp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RotateWindows;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RotationKB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_RotationPB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Save;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ScreenSaver;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ScrollClick;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ScrollDown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ScrollUp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Search;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Send;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Shop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Sleep;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Spell;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_SplitScreen;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Standby;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Start;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Stop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Support;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_1;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_10;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_11;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_12;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_2;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_3;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_4;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_5;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_6;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_7;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_8;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Switch_VT_9;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_TaskPane;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Terminal;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ToDoList;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Tools;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Travel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Ungrab;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_User1KB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_User2KB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_UserPB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_VendorHome;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Video;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_WWW;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_WakeUp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_WebCam;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_WheelButton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Word;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_XF86BackForward;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_Xfer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ZoomIn;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_ZoomOut;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XF86XK_iTouch;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XFD_SETSIZE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMHighlight;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMHotKeyStateOFF;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMHotKeyStateON;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMInitialState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditArea;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditCallbacks;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditDisable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditEnable;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditNothing;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditPosition;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreeditUnKnown;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPreserveState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMPrimary;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMReverse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMSecondary;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStatusArea;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStatusCallbacks;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStatusNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStatusNothing;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionBottomEdge;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionBuffer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionChar;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionConcealed;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionLeftEdge;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionLine;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionRetrieval;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionRightEdge;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionSubstitution;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionTopEdge;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionWord;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMStringConversionWrapped;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMTertiary;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMUnderline;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMVisibleToBackword;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMVisibleToCenter;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XIMVisibleToForward;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XLocaleNotSupported;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XLookupBoth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XLookupChars;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XLookupKeySym;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XLookupNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XMD_H;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNArea;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNAreaNeeded;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNBackground;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNBackgroundPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNBaseFontName;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNClientWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNContextualDrawing;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNDefaultString;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNDestroyCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNDirectionalDependentDrawing;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNFilterEvents;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNFocusWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNFontInfo;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNFontSet;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNForeground;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNGeometryCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNHotKey;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNHotKeyState;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNInputStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNLineSpace;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNMissingCharSet;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNOMAutomatic;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNOrientation;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditAttributes;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditCaretCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditDoneCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditDrawCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditStartCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditState;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNPreeditStateNotifyCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNQueryICValuesList;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNQueryIMValuesList;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNQueryInputStyle;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNQueryOrientation;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNR6PreeditCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNRequiredCharSet;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNResetState;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNResourceClass;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNResourceName;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNSeparatorofNestedList;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNSpotLocation;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStatusAttributes;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStatusDoneCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStatusDrawCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStatusStartCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStdColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStringConversion;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNStringConversionCallback;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNVaNestedList;
	[CCode (cheader_filename = "X11/X.h")]
	public const string XNVisiblePosition;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XNegative;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XNoMemory;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_DIRENTAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_GRPAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_NETDBAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_PWDAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_STRINGAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_TIMEAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XOS_USE_MTSAFE_UNISTDAPI;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XUrgencyHint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XWD_FILE_VERSION;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XYBitmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XYPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocColorCells;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocColorPlanes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllocNamedColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int AllowEvents;
	[CCode (cheader_filename = "X11/X.h")]
	public const int BIG_ENDIAN;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Bell;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeActivePointerGrab;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeGC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeHosts;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeKeyboardControl;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeKeyboardMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangePointerControl;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeProperty;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeSaveSet;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ChangeWindowAttributes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CirculateWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ClearArea;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CloseFont;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ConfigureWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ConvertSelection;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CopyArea;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CopyColormapAndFree;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CopyGC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CopyPlane;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateGC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateGlyphCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreatePixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int CreateWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DeleteProperty;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DestroySubwindows;
	[CCode (cheader_filename = "X11/X.h")]
	public const int DestroyWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Error;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FillPoly;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ForceScreenSaver;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FreeColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FreeColors;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FreeCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FreeGC;
	[CCode (cheader_filename = "X11/X.h")]
	public const int FreePixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetAtomName;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetFontPath;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetGeometry;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetImage;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetInputFocus;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetKeyboardControl;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetKeyboardMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetModifierMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetMotionEvents;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetPointerControl;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetPointerMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetProperty;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetScreenSaver;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetSelectionOwner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GetWindowAttributes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabButton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabKey;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int GrabServer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int HAVE_UTF8_STRING;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ImageText16;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ImageText8;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InstallColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int InternAtom;
	[CCode (cheader_filename = "X11/X.h")]
	public const int KillClient;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LINE_MAX;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LITTLE_ENDIAN;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListExtensions;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListFonts;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListFontsWithInfo;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListHosts;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListInstalledColormaps;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ListProperties;
	[CCode (cheader_filename = "X11/X.h")]
	public const int LookupColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MapSubwindows;
	[CCode (cheader_filename = "X11/X.h")]
	public const int MapWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NO_SYS_UN;
	[CCode (cheader_filename = "X11/X.h")]
	public const int NoOperation;
	[CCode (cheader_filename = "X11/X.h")]
	public const int OpenFont;
	[CCode (cheader_filename = "X11/X.h")]
	public const int POSIX_C_SOURCE;
	[CCode (cheader_filename = "X11/X.h")]
	public const int POSIX_THREAD_SAFE_FUNCTIONS;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PROTOCOL;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PROTOCOL_REVISION;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyArc;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyFillArc;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyFillRectangle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyLine;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyPoint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyRectangle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolySegment;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyText16;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PolyText8;
	[CCode (cheader_filename = "X11/X.h")]
	public const int PutImage;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryBestSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryColors;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryExtension;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryFont;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryKeymap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryTextExtents;
	[CCode (cheader_filename = "X11/X.h")]
	public const int QueryTree;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RecolorCursor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ReparentWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int Reply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int RotateProperties;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SendEvent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetAccessControl;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetClipRectangles;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetCloseDownMode;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetDashes;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetFontPath;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetInputFocus;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetModifierMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetPointerMapping;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetScreenSaver;
	[CCode (cheader_filename = "X11/X.h")]
	public const int SetSelectionOwner;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StoreColors;
	[CCode (cheader_filename = "X11/X.h")]
	public const int StoreNamedColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TCP_PORT;
	[CCode (cheader_filename = "X11/X.h")]
	public const int TranslateCoords;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UngrabButton;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UngrabKey;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UngrabKeyboard;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UngrabPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UngrabServer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UninstallColormap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UnmapSubwindows;
	[CCode (cheader_filename = "X11/X.h")]
	public const int UnmapWindow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int WarpPointer;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsFailure;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsInitFailure;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsInitNone;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsInitSuccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsSuccess;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XcmsSuccessWithCompression;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayClosing;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayDfltRMDB;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayIOError;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayNoXkb;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayPrivSync;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayProcConni;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayReadEvents;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibDisplayWriting;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XlibSpecificationRelease;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XrmEnumAllLevels;
	[CCode (cheader_filename = "X11/X.h")]
	public const int XrmEnumOneLevel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int YNegative;
	[CCode (cheader_filename = "X11/X.h")]
	public const int YSorted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int YValue;
	[CCode (cheader_filename = "X11/X.h")]
	public const int YXBanded;
	[CCode (cheader_filename = "X11/X.h")]
	public const int YXSorted;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ZLNSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ZPixmap;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ZRCTSPERBATCH;
	[CCode (cheader_filename = "X11/X.h")]
	public const int ZoomState;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_CharDel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Cmd;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Copy;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Cut;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_DownBox;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Edit;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Exit;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Grow;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_KP_parenleft;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_KP_parenright;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_LeftBar;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_LeftBox;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_LineDel;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Move;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Paste;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Pop;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Read;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Repeat;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_RightBar;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_RightBox;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Save;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_Shell;
	[CCode (cheader_filename = "X11/X.h")]
	public const int apXK_UpBox;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_XWDColor;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_XWDheader;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorCellsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorCellsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorPlanesReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorPlanesReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocColorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocNamedColorReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllocNamedColorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xAllowEventsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xArc;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xBellReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeActivePointerGrabReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeGCReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeHostsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeKeyboardControlReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeKeyboardMappingReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeModeReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangePointerControlReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangePropertyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeSaveSetReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xChangeWindowAttributesReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCharInfo;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCirculateWindowReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xClearAreaReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xColorItem;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xConfigureWindowReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xConnClientPrefix;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xConnSetup;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xConnSetupPrefix;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xConvertSelectionReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCopyAreaReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCopyColormapAndFreeReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCopyGCReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCopyPlaneReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreateColormapReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreateCursorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreateGCReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreateGlyphCursorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreatePixmapReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xCreateWindowReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xDeletePropertyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xDepth;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xError;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xEvent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xFillPolyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xFontProp;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xForceScreenSaverReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xFreeColorsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGenericReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetAtomNameReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetFontPathReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetGeometryReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetImageReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetImageReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetInputFocusReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetKeyboardControlReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetKeyboardMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetKeyboardMappingReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetModifierMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetMotionEventsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetMotionEventsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetPointerControlReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetPointerMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetPropertyReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetPropertyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetScreenSaverReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetSelectionOwnerReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGetWindowAttributesReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabButtonReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabKeyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabKeyboardReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabKeyboardReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabPointerReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xGrabPointerReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xHostEntry;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xImageText16Req;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xImageText8Req;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xImageTextReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xInternAtomReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xInternAtomReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xKeymapEvent;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListExtensionsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListFontsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListFontsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListFontsWithInfoReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListFontsWithInfoReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListHostsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListHostsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListInstalledColormapsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xListPropertiesReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xLookupColorReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xLookupColorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xOpenFontReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPixmapFormat;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPoint;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyArcReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyFillArcReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyFillRectangleReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyLineReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyPointReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyRectangleReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolySegmentReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyText16Req;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyText8Req;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPolyTextReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPropIconSize;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xPutImageReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryBestSizeReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryBestSizeReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryColorsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryColorsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryExtensionReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryExtensionReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryFontReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryKeymapReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryPointerReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryTextExtentsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryTextExtentsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xQueryTreeReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xRecolorCursorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xRectangle;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xReparentWindowReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xResourceReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xRotatePropertiesReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSegment;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSendEventReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetAccessControlReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetClipRectanglesReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetCloseDownModeReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetDashesReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetFontPathReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetInputFocusReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetModifierMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetModifierMappingReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetPointerMappingReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetPointerMappingReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetScreenSaverReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xSetSelectionOwnerReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xStoreColorsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xStoreNamedColorReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xTextElt;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xTimecoord;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xTranslateCoordsReply;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xTranslateCoordsReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xUngrabButtonReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xUngrabKeyReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xVisualType;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xWarpPointerReq;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xWindowRoot;
	[CCode (cheader_filename = "X11/X.h")]
	public const int sz_xrgb;
	[CCode (cheader_filename = "X11/X.h")]
	public const int xFalse;
	[CCode (cheader_filename = "X11/X.h")]
	public const int xTrue;
	[CCode (cname = "XActivateScreenSaver", cheader_filename = "X11/X.h")]
	public static int XActivateScreenSaver (X.Display p1);
	[CCode (cname = "XAddConnectionWatch", cheader_filename = "X11/X.h")]
	public static int XAddConnectionWatch (X.Display p1, X.ConnectionWatchProc p2, X.Pointer p3);
	[CCode (cname = "XAddExtension", cheader_filename = "X11/X.h")]
	public static weak X.ExtCodes XAddExtension (X.Display p1);
	[CCode (cname = "XAddHost", cheader_filename = "X11/X.h")]
	public static int XAddHost (X.Display p1, X.HostAddress p2);
	[CCode (cname = "XAddHosts", cheader_filename = "X11/X.h")]
	public static int XAddHosts (X.Display p1, X.HostAddress p2, int p3);
	[CCode (cname = "XAddToExtensionList", cheader_filename = "X11/X.h")]
	public static int XAddToExtensionList (void* p1, X.ExtData p2);
	[CCode (cname = "XAddToSaveSet", cheader_filename = "X11/X.h")]
	public static int XAddToSaveSet (X.Display p1, X.Window p2);
	[CCode (cname = "XAllPlanes", cheader_filename = "X11/X.h")]
	public static uint XAllPlanes ();
	[CCode (cname = "XAllocClassHint", cheader_filename = "X11/X.h")]
	public static weak X.ClassHint XAllocClassHint ();
	[CCode (cname = "XAllocColor", cheader_filename = "X11/X.h")]
	public static int XAllocColor (X.Display p1, X.Colormap p2, X.Color p3);
	[CCode (cname = "XAllocColorCells", cheader_filename = "X11/X.h")]
	public static int XAllocColorCells (X.Display p1, X.Colormap p2, int p3, uint p4, uint p5, uint p6, uint p7);
	[CCode (cname = "XAllocColorPlanes", cheader_filename = "X11/X.h")]
	public static int XAllocColorPlanes (X.Display p1, X.Colormap p2, int p3, uint p4, int p5, int p6, int p7, int p8, uint p9, uint p10, uint p11);
	[CCode (cname = "XAllocIconSize", cheader_filename = "X11/X.h")]
	public static weak X.IconSize XAllocIconSize ();
	[CCode (cname = "XAllocNamedColor", cheader_filename = "X11/X.h")]
	public static int XAllocNamedColor (X.Display p1, X.Colormap p2, string p3, X.Color p4, X.Color p5);
	[CCode (cname = "XAllocSizeHints", cheader_filename = "X11/X.h")]
	public static weak X.SizeHints XAllocSizeHints ();
	[CCode (cname = "XAllocStandardColormap", cheader_filename = "X11/X.h")]
	public static weak X.StandardColormap XAllocStandardColormap ();
	[CCode (cname = "XAllocWMHints", cheader_filename = "X11/X.h")]
	public static weak X.WMHints XAllocWMHints ();
	[CCode (cname = "XAllowEvents", cheader_filename = "X11/X.h")]
	public static int XAllowEvents (X.Display p1, int p2, X.Time p3);
	[CCode (cname = "XAutoRepeatOff", cheader_filename = "X11/X.h")]
	public static int XAutoRepeatOff (X.Display p1);
	[CCode (cname = "XAutoRepeatOn", cheader_filename = "X11/X.h")]
	public static int XAutoRepeatOn (X.Display p1);
	[CCode (cname = "XBaseFontNameListOfFontSet", cheader_filename = "X11/X.h")]
	public static weak string XBaseFontNameListOfFontSet (X.FontSet p1);
	[CCode (cname = "XBell", cheader_filename = "X11/X.h")]
	public static int XBell (X.Display p1, int p2);
	[CCode (cname = "XBitmapBitOrder", cheader_filename = "X11/X.h")]
	public static int XBitmapBitOrder (X.Display p1);
	[CCode (cname = "XBitmapPad", cheader_filename = "X11/X.h")]
	public static int XBitmapPad (X.Display p1);
	[CCode (cname = "XBitmapUnit", cheader_filename = "X11/X.h")]
	public static int XBitmapUnit (X.Display p1);
	[CCode (cname = "XBlackPixel", cheader_filename = "X11/X.h")]
	public static uint XBlackPixel (X.Display p1, int p2);
	[CCode (cname = "XBlackPixelOfScreen", cheader_filename = "X11/X.h")]
	public static uint XBlackPixelOfScreen (X.Screen p1);
	[CCode (cname = "XCellsOfScreen", cheader_filename = "X11/X.h")]
	public static int XCellsOfScreen (X.Screen p1);
	[CCode (cname = "XChangeActivePointerGrab", cheader_filename = "X11/X.h")]
	public static int XChangeActivePointerGrab (X.Display p1, uint p2, X.Cursor p3, X.Time p4);
	[CCode (cname = "XChangeGC", cheader_filename = "X11/X.h")]
	public static int XChangeGC (X.Display p1, int p2, uint p3, X.GCValues p4);
	[CCode (cname = "XChangeKeyboardControl", cheader_filename = "X11/X.h")]
	public static int XChangeKeyboardControl (X.Display p1, uint p2, X.KeyboardControl p3);
	[CCode (cname = "XChangeKeyboardMapping", cheader_filename = "X11/X.h")]
	public static int XChangeKeyboardMapping (X.Display p1, int p2, int p3, X.KeySym p4, int p5);
	[CCode (cname = "XChangePointerControl", cheader_filename = "X11/X.h")]
	public static int XChangePointerControl (X.Display p1, int p2, int p3, int p4, int p5, int p6);
	[CCode (cname = "XChangeProperty", cheader_filename = "X11/X.h")]
	public static int XChangeProperty (X.Display p1, X.Window p2, X.Atom p3, X.Atom p4, int p5, int p6, uint p7, int p8);
	[CCode (cname = "XChangeSaveSet", cheader_filename = "X11/X.h")]
	public static int XChangeSaveSet (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XChangeWindowAttributes", cheader_filename = "X11/X.h")]
	public static int XChangeWindowAttributes (X.Display p1, X.Window p2, uint p3, X.SetWindowAttributes p4);
	[CCode (cname = "XCheckIfEvent", cheader_filename = "X11/X.h")]
	public static int XCheckIfEvent (X.Display p1, X.Event p2, GLib.Callback p3, X.Pointer p4);
	[CCode (cname = "XCheckMaskEvent", cheader_filename = "X11/X.h")]
	public static int XCheckMaskEvent (X.Display p1, long p2, X.Event p3);
	[CCode (cname = "XCheckTypedEvent", cheader_filename = "X11/X.h")]
	public static int XCheckTypedEvent (X.Display p1, int p2, X.Event p3);
	[CCode (cname = "XCheckTypedWindowEvent", cheader_filename = "X11/X.h")]
	public static int XCheckTypedWindowEvent (X.Display p1, X.Window p2, int p3, X.Event p4);
	[CCode (cname = "XCheckWindowEvent", cheader_filename = "X11/X.h")]
	public static int XCheckWindowEvent (X.Display p1, X.Window p2, long p3, X.Event p4);
	[CCode (cname = "XCirculateSubwindows", cheader_filename = "X11/X.h")]
	public static int XCirculateSubwindows (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XCirculateSubwindowsDown", cheader_filename = "X11/X.h")]
	public static int XCirculateSubwindowsDown (X.Display p1, X.Window p2);
	[CCode (cname = "XCirculateSubwindowsUp", cheader_filename = "X11/X.h")]
	public static int XCirculateSubwindowsUp (X.Display p1, X.Window p2);
	[CCode (cname = "XClearArea", cheader_filename = "X11/X.h")]
	public static int XClearArea (X.Display p1, X.Window p2, int p3, int p4, uint p5, uint p6, int p7);
	[CCode (cname = "XClearWindow", cheader_filename = "X11/X.h")]
	public static int XClearWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XClipBox", cheader_filename = "X11/X.h")]
	public static int XClipBox (X.Region p1, X.Rectangle p2);
	[CCode (cname = "XCloseDisplay", cheader_filename = "X11/X.h")]
	public static int XCloseDisplay (X.Display p1);
	[CCode (cname = "XCloseIM", cheader_filename = "X11/X.h")]
	public static int XCloseIM (X.IM p1);
	[CCode (cname = "XCloseOM", cheader_filename = "X11/X.h")]
	public static int XCloseOM (X.OM p1);
	[CCode (cname = "XConfigureWindow", cheader_filename = "X11/X.h")]
	public static int XConfigureWindow (X.Display p1, X.Window p2, uint p3, X.WindowChanges p4);
	[CCode (cname = "XConnectionNumber", cheader_filename = "X11/X.h")]
	public static int XConnectionNumber (X.Display p1);
	[CCode (cname = "XContextDependentDrawing", cheader_filename = "X11/X.h")]
	public static int XContextDependentDrawing (X.FontSet p1);
	[CCode (cname = "XContextualDrawing", cheader_filename = "X11/X.h")]
	public static int XContextualDrawing (X.FontSet p1);
	[CCode (cname = "XConvertCase", cheader_filename = "X11/X.h")]
	public static void XConvertCase (X.KeySym p1, X.KeySym p2, X.KeySym p3);
	[CCode (cname = "XConvertSelection", cheader_filename = "X11/X.h")]
	public static int XConvertSelection (X.Display p1, X.Atom p2, X.Atom p3, X.Atom p4, X.Window p5, X.Time p6);
	[CCode (cname = "XCopyArea", cheader_filename = "X11/X.h")]
	public static int XCopyArea (X.Display p1, X.Drawable p2, X.Drawable p3, int p4, int p5, int p6, uint p7, uint p8, int p9, int p10);
	[CCode (cname = "XCopyColormapAndFree", cheader_filename = "X11/X.h")]
	public static weak X.Colormap XCopyColormapAndFree (X.Display p1, X.Colormap p2);
	[CCode (cname = "XCopyGC", cheader_filename = "X11/X.h")]
	public static int XCopyGC (X.Display p1, int p2, uint p3, int p4);
	[CCode (cname = "XCopyPlane", cheader_filename = "X11/X.h")]
	public static int XCopyPlane (X.Display p1, X.Drawable p2, X.Drawable p3, int p4, int p5, int p6, uint p7, uint p8, int p9, int p10, uint p11);
	[CCode (cname = "XCreateBitmapFromData", cheader_filename = "X11/X.h")]
	public static weak X.Pixmap XCreateBitmapFromData (X.Display p1, X.Drawable p2, string p3, uint p4, uint p5);
	[CCode (cname = "XCreateColormap", cheader_filename = "X11/X.h")]
	public static weak X.Colormap XCreateColormap (X.Display p1, X.Window p2, X.Visual p3, int p4);
	[CCode (cname = "XCreateFontCursor", cheader_filename = "X11/X.h")]
	public static weak X.Cursor XCreateFontCursor (X.Display p1, uint p2);
	[CCode (cname = "XCreateFontSet", cheader_filename = "X11/X.h")]
	public static weak X.FontSet XCreateFontSet (X.Display p1, string p2, out weak string p3, int p4, out weak string p5);
	[CCode (cname = "XCreateGC", cheader_filename = "X11/X.h")]
	public static int XCreateGC (X.Display p1, X.Drawable p2, uint p3, X.GCValues p4);
	[CCode (cname = "XCreateGlyphCursor", cheader_filename = "X11/X.h")]
	public static weak X.Cursor XCreateGlyphCursor (X.Display p1, X.Font p2, X.Font p3, uint p4, uint p5, X.Color p6, X.Color p7);
	[CCode (cname = "XCreateIC", cheader_filename = "X11/X.h")]
	public static weak X.IC XCreateIC (X.IM p1);
	[CCode (cname = "XCreateImage", cheader_filename = "X11/X.h")]
	public static weak X.Image XCreateImage (X.Display p1, X.Visual p2, uint p3, int p4, int p5, string p6, uint p7, uint p8, int p9, int p10);
	[CCode (cname = "XCreateOC", cheader_filename = "X11/X.h")]
	public static weak X.OC XCreateOC (X.OM p1);
	[CCode (cname = "XCreatePixmap", cheader_filename = "X11/X.h")]
	public static weak X.Pixmap XCreatePixmap (X.Display p1, X.Drawable p2, uint p3, uint p4, uint p5);
	[CCode (cname = "XCreatePixmapCursor", cheader_filename = "X11/X.h")]
	public static weak X.Cursor XCreatePixmapCursor (X.Display p1, X.Pixmap p2, X.Pixmap p3, X.Color p4, X.Color p5, uint p6, uint p7);
	[CCode (cname = "XCreatePixmapFromBitmapData", cheader_filename = "X11/X.h")]
	public static weak X.Pixmap XCreatePixmapFromBitmapData (X.Display p1, X.Drawable p2, string p3, uint p4, uint p5, uint p6, uint p7, uint p8);
	[CCode (cname = "XCreateRegion", cheader_filename = "X11/X.h")]
	public static weak X.Region XCreateRegion ();
	[CCode (cname = "XCreateSimpleWindow", cheader_filename = "X11/X.h")]
	public static weak X.Window XCreateSimpleWindow (X.Display p1, X.Window p2, int p3, int p4, uint p5, uint p6, uint p7, uint p8, uint p9);
	[CCode (cname = "XCreateWindow", cheader_filename = "X11/X.h")]
	public static weak X.Window XCreateWindow (X.Display p1, X.Window p2, int p3, int p4, uint p5, uint p6, uint p7, int p8, uint p9, X.Visual p10, uint p11, X.SetWindowAttributes p12);
	[CCode (cname = "XDefaultColormap", cheader_filename = "X11/X.h")]
	public static weak X.Colormap XDefaultColormap (X.Display p1, int p2);
	[CCode (cname = "XDefaultColormapOfScreen", cheader_filename = "X11/X.h")]
	public static weak X.Colormap XDefaultColormapOfScreen (X.Screen p1);
	[CCode (cname = "XDefaultDepth", cheader_filename = "X11/X.h")]
	public static int XDefaultDepth (X.Display p1, int p2);
	[CCode (cname = "XDefaultDepthOfScreen", cheader_filename = "X11/X.h")]
	public static int XDefaultDepthOfScreen (X.Screen p1);
	[CCode (cname = "XDefaultGC", cheader_filename = "X11/X.h")]
	public static int XDefaultGC (X.Display p1, int p2);
	[CCode (cname = "XDefaultGCOfScreen", cheader_filename = "X11/X.h")]
	public static int XDefaultGCOfScreen (X.Screen p1);
	[CCode (cname = "XDefaultRootWindow", cheader_filename = "X11/X.h")]
	public static weak X.Window XDefaultRootWindow (X.Display p1);
	[CCode (cname = "XDefaultScreen", cheader_filename = "X11/X.h")]
	public static int XDefaultScreen (X.Display p1);
	[CCode (cname = "XDefaultScreenOfDisplay", cheader_filename = "X11/X.h")]
	public static weak X.Screen XDefaultScreenOfDisplay (X.Display p1);
	[CCode (cname = "XDefaultString", cheader_filename = "X11/X.h")]
	public static weak string XDefaultString ();
	[CCode (cname = "XDefaultVisual", cheader_filename = "X11/X.h")]
	public static weak X.Visual XDefaultVisual (X.Display p1, int p2);
	[CCode (cname = "XDefaultVisualOfScreen", cheader_filename = "X11/X.h")]
	public static weak X.Visual XDefaultVisualOfScreen (X.Screen p1);
	[CCode (cname = "XDefineCursor", cheader_filename = "X11/X.h")]
	public static int XDefineCursor (X.Display p1, X.Window p2, X.Cursor p3);
	[CCode (cname = "XDeleteContext", cheader_filename = "X11/X.h")]
	public static int XDeleteContext (X.Display p1, X.ID p2, X.Context p3);
	[CCode (cname = "XDeleteModifiermapEntry", cheader_filename = "X11/X.h")]
	public static weak X.ModifierKeymap XDeleteModifiermapEntry (X.ModifierKeymap p1, X.KeyCode p2, int p3);
	[CCode (cname = "XDeleteProperty", cheader_filename = "X11/X.h")]
	public static int XDeleteProperty (X.Display p1, X.Window p2, X.Atom p3);
	[CCode (cname = "XDestroyIC", cheader_filename = "X11/X.h")]
	public static void XDestroyIC (X.IC p1);
	[CCode (cname = "XDestroyOC", cheader_filename = "X11/X.h")]
	public static void XDestroyOC (X.OC p1);
	[CCode (cname = "XDestroyRegion", cheader_filename = "X11/X.h")]
	public static int XDestroyRegion (X.Region p1);
	[CCode (cname = "XDestroySubwindows", cheader_filename = "X11/X.h")]
	public static int XDestroySubwindows (X.Display p1, X.Window p2);
	[CCode (cname = "XDestroyWindow", cheader_filename = "X11/X.h")]
	public static int XDestroyWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XDirectionalDependentDrawing", cheader_filename = "X11/X.h")]
	public static int XDirectionalDependentDrawing (X.FontSet p1);
	[CCode (cname = "XDisableAccessControl", cheader_filename = "X11/X.h")]
	public static int XDisableAccessControl (X.Display p1);
	[CCode (cname = "XDisplayCells", cheader_filename = "X11/X.h")]
	public static int XDisplayCells (X.Display p1, int p2);
	[CCode (cname = "XDisplayHeight", cheader_filename = "X11/X.h")]
	public static int XDisplayHeight (X.Display p1, int p2);
	[CCode (cname = "XDisplayHeightMM", cheader_filename = "X11/X.h")]
	public static int XDisplayHeightMM (X.Display p1, int p2);
	[CCode (cname = "XDisplayKeycodes", cheader_filename = "X11/X.h")]
	public static int XDisplayKeycodes (X.Display p1, int p2, int p3);
	[CCode (cname = "XDisplayMotionBufferSize", cheader_filename = "X11/X.h")]
	public static uint XDisplayMotionBufferSize (X.Display p1);
	[CCode (cname = "XDisplayName", cheader_filename = "X11/X.h")]
	public static weak string XDisplayName (string p1);
	[CCode (cname = "XDisplayOfIM", cheader_filename = "X11/X.h")]
	public static weak X.Display XDisplayOfIM (X.IM p1);
	[CCode (cname = "XDisplayOfOM", cheader_filename = "X11/X.h")]
	public static weak X.Display XDisplayOfOM (X.OM p1);
	[CCode (cname = "XDisplayOfScreen", cheader_filename = "X11/X.h")]
	public static weak X.Display XDisplayOfScreen (X.Screen p1);
	[CCode (cname = "XDisplayPlanes", cheader_filename = "X11/X.h")]
	public static int XDisplayPlanes (X.Display p1, int p2);
	[CCode (cname = "XDisplayString", cheader_filename = "X11/X.h")]
	public static weak string XDisplayString (X.Display p1);
	[CCode (cname = "XDisplayWidth", cheader_filename = "X11/X.h")]
	public static int XDisplayWidth (X.Display p1, int p2);
	[CCode (cname = "XDisplayWidthMM", cheader_filename = "X11/X.h")]
	public static int XDisplayWidthMM (X.Display p1, int p2);
	[CCode (cname = "XDoesBackingStore", cheader_filename = "X11/X.h")]
	public static int XDoesBackingStore (X.Screen p1);
	[CCode (cname = "XDoesSaveUnders", cheader_filename = "X11/X.h")]
	public static int XDoesSaveUnders (X.Screen p1);
	[CCode (cname = "XDrawArc", cheader_filename = "X11/X.h")]
	public static int XDrawArc (X.Display p1, X.Drawable p2, int p3, int p4, int p5, uint p6, uint p7, int p8, int p9);
	[CCode (cname = "XDrawArcs", cheader_filename = "X11/X.h")]
	public static int XDrawArcs (X.Display p1, X.Drawable p2, int p3, X.Arc p4, int p5);
	[CCode (cname = "XDrawImageString", cheader_filename = "X11/X.h")]
	public static int XDrawImageString (X.Display p1, X.Drawable p2, int p3, int p4, int p5, string p6, int p7);
	[CCode (cname = "XDrawImageString16", cheader_filename = "X11/X.h")]
	public static int XDrawImageString16 (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.Char2b p6, int p7);
	[CCode (cname = "XDrawLine", cheader_filename = "X11/X.h")]
	public static int XDrawLine (X.Display p1, X.Drawable p2, int p3, int p4, int p5, int p6, int p7);
	[CCode (cname = "XDrawLines", cheader_filename = "X11/X.h")]
	public static int XDrawLines (X.Display p1, X.Drawable p2, int p3, X.Point p4, int p5, int p6);
	[CCode (cname = "XDrawPoint", cheader_filename = "X11/X.h")]
	public static int XDrawPoint (X.Display p1, X.Drawable p2, int p3, int p4, int p5);
	[CCode (cname = "XDrawPoints", cheader_filename = "X11/X.h")]
	public static int XDrawPoints (X.Display p1, X.Drawable p2, int p3, X.Point p4, int p5, int p6);
	[CCode (cname = "XDrawRectangle", cheader_filename = "X11/X.h")]
	public static int XDrawRectangle (X.Display p1, X.Drawable p2, int p3, int p4, int p5, uint p6, uint p7);
	[CCode (cname = "XDrawRectangles", cheader_filename = "X11/X.h")]
	public static int XDrawRectangles (X.Display p1, X.Drawable p2, int p3, X.Rectangle p4, int p5);
	[CCode (cname = "XDrawSegments", cheader_filename = "X11/X.h")]
	public static int XDrawSegments (X.Display p1, X.Drawable p2, int p3, X.Segment p4, int p5);
	[CCode (cname = "XDrawString", cheader_filename = "X11/X.h")]
	public static int XDrawString (X.Display p1, X.Drawable p2, int p3, int p4, int p5, string p6, int p7);
	[CCode (cname = "XDrawString16", cheader_filename = "X11/X.h")]
	public static int XDrawString16 (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.Char2b p6, int p7);
	[CCode (cname = "XDrawText", cheader_filename = "X11/X.h")]
	public static int XDrawText (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.TextItem p6, int p7);
	[CCode (cname = "XDrawText16", cheader_filename = "X11/X.h")]
	public static int XDrawText16 (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.TextItem16 p6, int p7);
	[CCode (cname = "XEHeadOfExtensionList", cheader_filename = "X11/X.h")]
	public static weak X.ExtData XEHeadOfExtensionList (X.EDataObject p1);
	[CCode (cname = "XESetBeforeFlush", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetBeforeFlush (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetCloseDisplay", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetCloseDisplay (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetCopyGC", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetCopyGC (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetCreateFont", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetCreateFont (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetCreateGC", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetCreateGC (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetError", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetError (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetErrorString", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetErrorString (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetEventToWire", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetEventToWire (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetFlushGC", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetFlushGC (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetFreeFont", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetFreeFont (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetFreeGC", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetFreeGC (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetPrintErrorValues", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetPrintErrorValues (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetWireToError", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetWireToError (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XESetWireToEvent", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XESetWireToEvent (X.Display p1, int p2, GLib.Callback p3);
	[CCode (cname = "XEmptyRegion", cheader_filename = "X11/X.h")]
	public static int XEmptyRegion (X.Region p1);
	[CCode (cname = "XEnableAccessControl", cheader_filename = "X11/X.h")]
	public static int XEnableAccessControl (X.Display p1);
	[CCode (cname = "XEqualRegion", cheader_filename = "X11/X.h")]
	public static int XEqualRegion (X.Region p1, X.Region p2);
	[CCode (cname = "XEventMaskOfScreen", cheader_filename = "X11/X.h")]
	public static long XEventMaskOfScreen (X.Screen p1);
	[CCode (cname = "XEventsQueued", cheader_filename = "X11/X.h")]
	public static int XEventsQueued (X.Display p1, int p2);
	[CCode (cname = "XExtendedMaxRequestSize", cheader_filename = "X11/X.h")]
	public static long XExtendedMaxRequestSize (X.Display p1);
	[CCode (cname = "XExtentsOfFontSet", cheader_filename = "X11/X.h")]
	public static weak X.FontSetExtents XExtentsOfFontSet (X.FontSet p1);
	[CCode (cname = "XFetchBuffer", cheader_filename = "X11/X.h")]
	public static weak string XFetchBuffer (X.Display p1, int p2, int p3);
	[CCode (cname = "XFetchBytes", cheader_filename = "X11/X.h")]
	public static weak string XFetchBytes (X.Display p1, int p2);
	[CCode (cname = "XFetchName", cheader_filename = "X11/X.h")]
	public static int XFetchName (X.Display p1, X.Window p2, out weak string p3);
	[CCode (cname = "XFillArc", cheader_filename = "X11/X.h")]
	public static int XFillArc (X.Display p1, X.Drawable p2, int p3, int p4, int p5, uint p6, uint p7, int p8, int p9);
	[CCode (cname = "XFillArcs", cheader_filename = "X11/X.h")]
	public static int XFillArcs (X.Display p1, X.Drawable p2, int p3, X.Arc p4, int p5);
	[CCode (cname = "XFillPolygon", cheader_filename = "X11/X.h")]
	public static int XFillPolygon (X.Display p1, X.Drawable p2, int p3, X.Point p4, int p5, int p6, int p7);
	[CCode (cname = "XFillRectangle", cheader_filename = "X11/X.h")]
	public static int XFillRectangle (X.Display p1, X.Drawable p2, int p3, int p4, int p5, uint p6, uint p7);
	[CCode (cname = "XFillRectangles", cheader_filename = "X11/X.h")]
	public static int XFillRectangles (X.Display p1, X.Drawable p2, int p3, X.Rectangle p4, int p5);
	[CCode (cname = "XFilterEvent", cheader_filename = "X11/X.h")]
	public static int XFilterEvent (X.Event p1, X.Window p2);
	[CCode (cname = "XFindContext", cheader_filename = "X11/X.h")]
	public static int XFindContext (X.Display p1, X.ID p2, X.Context p3, X.Pointer p4);
	[CCode (cname = "XFindOnExtensionList", cheader_filename = "X11/X.h")]
	public static weak X.ExtData XFindOnExtensionList (out weak X.ExtData p1, int p2);
	[CCode (cname = "XFlush", cheader_filename = "X11/X.h")]
	public static int XFlush (X.Display p1);
	[CCode (cname = "XFlushGC", cheader_filename = "X11/X.h")]
	public static void XFlushGC (X.Display p1, int p2);
	[CCode (cname = "XFontsOfFontSet", cheader_filename = "X11/X.h")]
	public static int XFontsOfFontSet (X.FontSet p1, out weak X.FontStruct p2, out weak string p3);
	[CCode (cname = "XForceScreenSaver", cheader_filename = "X11/X.h")]
	public static int XForceScreenSaver (X.Display p1, int p2);
	[CCode (cname = "XFree", cheader_filename = "X11/X.h")]
	public static int XFree (void* p1);
	[CCode (cname = "XFreeColormap", cheader_filename = "X11/X.h")]
	public static int XFreeColormap (X.Display p1, X.Colormap p2);
	[CCode (cname = "XFreeColors", cheader_filename = "X11/X.h")]
	public static int XFreeColors (X.Display p1, X.Colormap p2, uint p3, int p4, uint p5);
	[CCode (cname = "XFreeCursor", cheader_filename = "X11/X.h")]
	public static int XFreeCursor (X.Display p1, X.Cursor p2);
	[CCode (cname = "XFreeExtensionList", cheader_filename = "X11/X.h")]
	public static int XFreeExtensionList (out weak string p1);
	[CCode (cname = "XFreeFont", cheader_filename = "X11/X.h")]
	public static int XFreeFont (X.Display p1, X.FontStruct p2);
	[CCode (cname = "XFreeFontInfo", cheader_filename = "X11/X.h")]
	public static int XFreeFontInfo (out weak string p1, X.FontStruct p2, int p3);
	[CCode (cname = "XFreeFontNames", cheader_filename = "X11/X.h")]
	public static int XFreeFontNames (out weak string p1);
	[CCode (cname = "XFreeFontPath", cheader_filename = "X11/X.h")]
	public static int XFreeFontPath (out weak string p1);
	[CCode (cname = "XFreeFontSet", cheader_filename = "X11/X.h")]
	public static void XFreeFontSet (X.Display p1, X.FontSet p2);
	[CCode (cname = "XFreeGC", cheader_filename = "X11/X.h")]
	public static int XFreeGC (X.Display p1, int p2);
	[CCode (cname = "XFreeModifiermap", cheader_filename = "X11/X.h")]
	public static int XFreeModifiermap (X.ModifierKeymap p1);
	[CCode (cname = "XFreePixmap", cheader_filename = "X11/X.h")]
	public static int XFreePixmap (X.Display p1, X.Pixmap p2);
	[CCode (cname = "XFreeStringList", cheader_filename = "X11/X.h")]
	public static void XFreeStringList (out weak string p1);
	[CCode (cname = "XGContextFromGC", cheader_filename = "X11/X.h")]
	public static ulong XGContextFromGC (int p1);
	[CCode (cname = "XGeometry", cheader_filename = "X11/X.h")]
	public static int XGeometry (X.Display p1, int p2, string p3, string p4, uint p5, uint p6, uint p7, int p8, int p9, int p10, int p11, int p12, int p13);
	[CCode (cname = "XGetAtomName", cheader_filename = "X11/X.h")]
	public static weak string XGetAtomName (X.Display p1, X.Atom p2);
	[CCode (cname = "XGetAtomNames", cheader_filename = "X11/X.h")]
	public static int XGetAtomNames (X.Display p1, X.Atom p2, int p3, out weak string p4);
	[CCode (cname = "XGetClassHint", cheader_filename = "X11/X.h")]
	public static int XGetClassHint (X.Display p1, X.Window p2, X.ClassHint p3);
	[CCode (cname = "XGetCommand", cheader_filename = "X11/X.h")]
	public static int XGetCommand (X.Display p1, X.Window p2, out weak string p3, int p4);
	[CCode (cname = "XGetDefault", cheader_filename = "X11/X.h")]
	public static weak string XGetDefault (X.Display p1, string p2, string p3);
	[CCode (cname = "XGetErrorDatabaseText", cheader_filename = "X11/X.h")]
	public static int XGetErrorDatabaseText (X.Display p1, string p2, string p3, string p4, string p5, int p6);
	[CCode (cname = "XGetErrorText", cheader_filename = "X11/X.h")]
	public static int XGetErrorText (X.Display p1, int p2, string p3, int p4);
	[CCode (cname = "XGetFontPath", cheader_filename = "X11/X.h")]
	public static weak string XGetFontPath (X.Display p1, int p2);
	[CCode (cname = "XGetFontProperty", cheader_filename = "X11/X.h")]
	public static int XGetFontProperty (X.FontStruct p1, X.Atom p2, uint p3);
	[CCode (cname = "XGetGCValues", cheader_filename = "X11/X.h")]
	public static int XGetGCValues (X.Display p1, int p2, uint p3, X.GCValues p4);
	[CCode (cname = "XGetGeometry", cheader_filename = "X11/X.h")]
	public static int XGetGeometry (X.Display p1, X.Drawable p2, X.Window p3, int p4, int p5, uint p6, uint p7, uint p8, uint p9);
	[CCode (cname = "XGetICValues", cheader_filename = "X11/X.h")]
	public static weak string XGetICValues (X.IC p1);
	[CCode (cname = "XGetIMValues", cheader_filename = "X11/X.h")]
	public static weak string XGetIMValues (X.IM p1);
	[CCode (cname = "XGetIconName", cheader_filename = "X11/X.h")]
	public static int XGetIconName (X.Display p1, X.Window p2, out weak string p3);
	[CCode (cname = "XGetIconSizes", cheader_filename = "X11/X.h")]
	public static int XGetIconSizes (X.Display p1, X.Window p2, out weak X.IconSize p3, int p4);
	[CCode (cname = "XGetImage", cheader_filename = "X11/X.h")]
	public static weak X.Image XGetImage (X.Display p1, X.Drawable p2, int p3, int p4, uint p5, uint p6, uint p7, int p8);
	[CCode (cname = "XGetInputFocus", cheader_filename = "X11/X.h")]
	public static int XGetInputFocus (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XGetKeyboardControl", cheader_filename = "X11/X.h")]
	public static int XGetKeyboardControl (X.Display p1, X.KeyboardState p2);
	[CCode (cname = "XGetKeyboardMapping", cheader_filename = "X11/X.h")]
	public static weak X.KeySym XGetKeyboardMapping (X.Display p1, X.KeyCode p2, int p3, int p4);
	[CCode (cname = "XGetModifierMapping", cheader_filename = "X11/X.h")]
	public static weak X.ModifierKeymap XGetModifierMapping (X.Display p1);
	[CCode (cname = "XGetMotionEvents", cheader_filename = "X11/X.h")]
	public static weak X.TimeCoord XGetMotionEvents (X.Display p1, X.Window p2, X.Time p3, X.Time p4, int p5);
	[CCode (cname = "XGetNormalHints", cheader_filename = "X11/X.h")]
	public static int XGetNormalHints (X.Display p1, X.Window p2, X.SizeHints p3);
	[CCode (cname = "XGetOCValues", cheader_filename = "X11/X.h")]
	public static weak string XGetOCValues (X.OC p1);
	[CCode (cname = "XGetOMValues", cheader_filename = "X11/X.h")]
	public static weak string XGetOMValues (X.OM p1);
	[CCode (cname = "XGetPointerControl", cheader_filename = "X11/X.h")]
	public static int XGetPointerControl (X.Display p1, int p2, int p3, int p4);
	[CCode (cname = "XGetPointerMapping", cheader_filename = "X11/X.h")]
	public static int XGetPointerMapping (X.Display p1, uint p2, int p3);
	[CCode (cname = "XGetRGBColormaps", cheader_filename = "X11/X.h")]
	public static int XGetRGBColormaps (X.Display p1, X.Window p2, out weak X.StandardColormap p3, int p4, X.Atom p5);
	[CCode (cname = "XGetScreenSaver", cheader_filename = "X11/X.h")]
	public static int XGetScreenSaver (X.Display p1, int p2, int p3, int p4, int p5);
	[CCode (cname = "XGetSelectionOwner", cheader_filename = "X11/X.h")]
	public static weak X.Window XGetSelectionOwner (X.Display p1, X.Atom p2);
	[CCode (cname = "XGetSizeHints", cheader_filename = "X11/X.h")]
	public static int XGetSizeHints (X.Display p1, X.Window p2, X.SizeHints p3, X.Atom p4);
	[CCode (cname = "XGetStandardColormap", cheader_filename = "X11/X.h")]
	public static int XGetStandardColormap (X.Display p1, X.Window p2, X.StandardColormap p3, X.Atom p4);
	[CCode (cname = "XGetSubImage", cheader_filename = "X11/X.h")]
	public static weak X.Image XGetSubImage (X.Display p1, X.Drawable p2, int p3, int p4, uint p5, uint p6, uint p7, int p8, X.Image p9, int p10, int p11);
	[CCode (cname = "XGetTextProperty", cheader_filename = "X11/X.h")]
	public static int XGetTextProperty (X.Display p1, X.Window p2, X.TextProperty p3, X.Atom p4);
	[CCode (cname = "XGetTransientForHint", cheader_filename = "X11/X.h")]
	public static int XGetTransientForHint (X.Display p1, X.Window p2, X.Window p3);
	[CCode (cname = "XGetVisualInfo", cheader_filename = "X11/X.h")]
	public static weak X.VisualInfo XGetVisualInfo (X.Display p1, long p2, X.VisualInfo p3, int p4);
	[CCode (cname = "XGetWMClientMachine", cheader_filename = "X11/X.h")]
	public static int XGetWMClientMachine (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XGetWMColormapWindows", cheader_filename = "X11/X.h")]
	public static int XGetWMColormapWindows (X.Display p1, X.Window p2, out weak X.Window p3, int p4);
	[CCode (cname = "XGetWMHints", cheader_filename = "X11/X.h")]
	public static weak X.WMHints XGetWMHints (X.Display p1, X.Window p2);
	[CCode (cname = "XGetWMIconName", cheader_filename = "X11/X.h")]
	public static int XGetWMIconName (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XGetWMName", cheader_filename = "X11/X.h")]
	public static int XGetWMName (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XGetWMNormalHints", cheader_filename = "X11/X.h")]
	public static int XGetWMNormalHints (X.Display p1, X.Window p2, X.SizeHints p3, long p4);
	[CCode (cname = "XGetWMProtocols", cheader_filename = "X11/X.h")]
	public static int XGetWMProtocols (X.Display p1, X.Window p2, out weak X.Atom p3, int p4);
	[CCode (cname = "XGetWMSizeHints", cheader_filename = "X11/X.h")]
	public static int XGetWMSizeHints (X.Display p1, X.Window p2, X.SizeHints p3, long p4, X.Atom p5);
	[CCode (cname = "XGetWindowAttributes", cheader_filename = "X11/X.h")]
	public static int XGetWindowAttributes (X.Display p1, X.Window p2, X.WindowAttributes p3);
	[CCode (cname = "XGetWindowProperty", cheader_filename = "X11/X.h")]
	public static int XGetWindowProperty (X.Display p1, X.Window p2, X.Atom p3, long p4, long p5, int p6, X.Atom p7, X.Atom p8, int p9, uint p10, uint p11, uint p12);
	[CCode (cname = "XGetZoomHints", cheader_filename = "X11/X.h")]
	public static int XGetZoomHints (X.Display p1, X.Window p2, X.SizeHints p3);
	[CCode (cname = "XGrabButton", cheader_filename = "X11/X.h")]
	public static int XGrabButton (X.Display p1, uint p2, uint p3, X.Window p4, int p5, uint p6, int p7, int p8, X.Window p9, X.Cursor p10);
	[CCode (cname = "XGrabKey", cheader_filename = "X11/X.h")]
	public static int XGrabKey (X.Display p1, int p2, uint p3, X.Window p4, int p5, int p6, int p7);
	[CCode (cname = "XGrabKeyboard", cheader_filename = "X11/X.h")]
	public static int XGrabKeyboard (X.Display p1, X.Window p2, int p3, int p4, int p5, X.Time p6);
	[CCode (cname = "XGrabPointer", cheader_filename = "X11/X.h")]
	public static int XGrabPointer (X.Display p1, X.Window p2, int p3, uint p4, int p5, int p6, X.Window p7, X.Cursor p8, X.Time p9);
	[CCode (cname = "XGrabServer", cheader_filename = "X11/X.h")]
	public static int XGrabServer (X.Display p1);
	[CCode (cname = "XHeightMMOfScreen", cheader_filename = "X11/X.h")]
	public static int XHeightMMOfScreen (X.Screen p1);
	[CCode (cname = "XHeightOfScreen", cheader_filename = "X11/X.h")]
	public static int XHeightOfScreen (X.Screen p1);
	[CCode (cname = "XIMOfIC", cheader_filename = "X11/X.h")]
	public static weak X.IM XIMOfIC (X.IC p1);
	[CCode (cname = "XIconifyWindow", cheader_filename = "X11/X.h")]
	public static int XIconifyWindow (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XIfEvent", cheader_filename = "X11/X.h")]
	public static int XIfEvent (X.Display p1, X.Event p2, GLib.Callback p3, X.Pointer p4);
	[CCode (cname = "XImageByteOrder", cheader_filename = "X11/X.h")]
	public static int XImageByteOrder (X.Display p1);
	[CCode (cname = "XInitExtension", cheader_filename = "X11/X.h")]
	public static weak X.ExtCodes XInitExtension (X.Display p1, string p2);
	[CCode (cname = "XInitImage", cheader_filename = "X11/X.h")]
	public static int XInitImage (X.Image p1);
	[CCode (cname = "XInitThreads", cheader_filename = "X11/X.h")]
	public static int XInitThreads ();
	[CCode (cname = "XInsertModifiermapEntry", cheader_filename = "X11/X.h")]
	public static weak X.ModifierKeymap XInsertModifiermapEntry (X.ModifierKeymap p1, X.KeyCode p2, int p3);
	[CCode (cname = "XInstallColormap", cheader_filename = "X11/X.h")]
	public static int XInstallColormap (X.Display p1, X.Colormap p2);
	[CCode (cname = "XInternAtom", cheader_filename = "X11/X.h")]
	public static weak X.Atom XInternAtom (X.Display p1, string p2, int p3);
	[CCode (cname = "XInternAtoms", cheader_filename = "X11/X.h")]
	public static int XInternAtoms (X.Display p1, out weak string p2, int p3, int p4, X.Atom p5);
	[CCode (cname = "XInternalConnectionNumbers", cheader_filename = "X11/X.h")]
	public static int XInternalConnectionNumbers (X.Display p1, int p2, int p3);
	[CCode (cname = "XIntersectRegion", cheader_filename = "X11/X.h")]
	public static int XIntersectRegion (X.Region p1, X.Region p2, X.Region p3);
	[CCode (cname = "XKeycodeToKeysym", cheader_filename = "X11/X.h")]
	public static weak X.KeySym XKeycodeToKeysym (X.Display p1, X.KeyCode p2, int p3);
	[CCode (cname = "XKeysymToKeycode", cheader_filename = "X11/X.h")]
	public static weak X.KeyCode XKeysymToKeycode (X.Display p1, X.KeySym p2);
	[CCode (cname = "XKeysymToString", cheader_filename = "X11/X.h")]
	public static weak string XKeysymToString (X.KeySym p1);
	[CCode (cname = "XKillClient", cheader_filename = "X11/X.h")]
	public static int XKillClient (X.Display p1, X.ID p2);
	[CCode (cname = "XLastKnownRequestProcessed", cheader_filename = "X11/X.h")]
	public static uint XLastKnownRequestProcessed (X.Display p1);
	[CCode (cname = "XListDepths", cheader_filename = "X11/X.h")]
	public static int XListDepths (X.Display p1, int p2, int p3);
	[CCode (cname = "XListExtensions", cheader_filename = "X11/X.h")]
	public static weak string XListExtensions (X.Display p1, int p2);
	[CCode (cname = "XListFonts", cheader_filename = "X11/X.h")]
	public static weak string XListFonts (X.Display p1, string p2, int p3, int p4);
	[CCode (cname = "XListFontsWithInfo", cheader_filename = "X11/X.h")]
	public static weak string XListFontsWithInfo (X.Display p1, string p2, int p3, int p4, out weak X.FontStruct p5);
	[CCode (cname = "XListHosts", cheader_filename = "X11/X.h")]
	public static weak X.HostAddress XListHosts (X.Display p1, int p2, int p3);
	[CCode (cname = "XListInstalledColormaps", cheader_filename = "X11/X.h")]
	public static weak X.Colormap XListInstalledColormaps (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XListPixmapFormats", cheader_filename = "X11/X.h")]
	public static weak X.PixmapFormatValues XListPixmapFormats (X.Display p1, int p2);
	[CCode (cname = "XListProperties", cheader_filename = "X11/X.h")]
	public static weak X.Atom XListProperties (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XLoadFont", cheader_filename = "X11/X.h")]
	public static weak X.Font XLoadFont (X.Display p1, string p2);
	[CCode (cname = "XLoadQueryFont", cheader_filename = "X11/X.h")]
	public static weak X.FontStruct XLoadQueryFont (X.Display p1, string p2);
	[CCode (cname = "XLocaleOfFontSet", cheader_filename = "X11/X.h")]
	public static weak string XLocaleOfFontSet (X.FontSet p1);
	[CCode (cname = "XLocaleOfIM", cheader_filename = "X11/X.h")]
	public static weak string XLocaleOfIM (X.IM p1);
	[CCode (cname = "XLocaleOfOM", cheader_filename = "X11/X.h")]
	public static weak string XLocaleOfOM (X.OM p1);
	[CCode (cname = "XLockDisplay", cheader_filename = "X11/X.h")]
	public static void XLockDisplay (X.Display p1);
	[CCode (cname = "XLookupColor", cheader_filename = "X11/X.h")]
	public static int XLookupColor (X.Display p1, X.Colormap p2, string p3, X.Color p4, X.Color p5);
	[CCode (cname = "XLookupKeysym", cheader_filename = "X11/X.h")]
	public static weak X.KeySym XLookupKeysym (X.KeyEvent p1, int p2);
	[CCode (cname = "XLookupString", cheader_filename = "X11/X.h")]
	public static int XLookupString (X.KeyEvent p1, string p2, int p3, X.KeySym p4, X.ComposeStatus p5);
	[CCode (cname = "XLowerWindow", cheader_filename = "X11/X.h")]
	public static int XLowerWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XMapRaised", cheader_filename = "X11/X.h")]
	public static int XMapRaised (X.Display p1, X.Window p2);
	[CCode (cname = "XMapSubwindows", cheader_filename = "X11/X.h")]
	public static int XMapSubwindows (X.Display p1, X.Window p2);
	[CCode (cname = "XMapWindow", cheader_filename = "X11/X.h")]
	public static int XMapWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XMaskEvent", cheader_filename = "X11/X.h")]
	public static int XMaskEvent (X.Display p1, long p2, X.Event p3);
	[CCode (cname = "XMatchVisualInfo", cheader_filename = "X11/X.h")]
	public static int XMatchVisualInfo (X.Display p1, int p2, int p3, int p4, X.VisualInfo p5);
	[CCode (cname = "XMaxCmapsOfScreen", cheader_filename = "X11/X.h")]
	public static int XMaxCmapsOfScreen (X.Screen p1);
	[CCode (cname = "XMaxRequestSize", cheader_filename = "X11/X.h")]
	public static long XMaxRequestSize (X.Display p1);
	[CCode (cname = "XMinCmapsOfScreen", cheader_filename = "X11/X.h")]
	public static int XMinCmapsOfScreen (X.Screen p1);
	[CCode (cname = "XMoveResizeWindow", cheader_filename = "X11/X.h")]
	public static int XMoveResizeWindow (X.Display p1, X.Window p2, int p3, int p4, uint p5, uint p6);
	[CCode (cname = "XMoveWindow", cheader_filename = "X11/X.h")]
	public static int XMoveWindow (X.Display p1, X.Window p2, int p3, int p4);
	[CCode (cname = "XNewModifiermap", cheader_filename = "X11/X.h")]
	public static weak X.ModifierKeymap XNewModifiermap (int p1);
	[CCode (cname = "XNextEvent", cheader_filename = "X11/X.h")]
	public static int XNextEvent (X.Display p1, X.Event p2);
	[CCode (cname = "XNextRequest", cheader_filename = "X11/X.h")]
	public static uint XNextRequest (X.Display p1);
	[CCode (cname = "XNoOp", cheader_filename = "X11/X.h")]
	public static int XNoOp (X.Display p1);
	[CCode (cname = "XOMOfOC", cheader_filename = "X11/X.h")]
	public static weak X.OM XOMOfOC (X.OC p1);
	[CCode (cname = "XOffsetRegion", cheader_filename = "X11/X.h")]
	public static int XOffsetRegion (X.Region p1, int p2, int p3);
	[CCode (cname = "XOpenDisplay", cheader_filename = "X11/X.h")]
	public static weak X.Display XOpenDisplay (string p1);
	[CCode (cname = "XOpenIM", cheader_filename = "X11/X.h")]
	public static weak X.IM XOpenIM (X.Display p1, void* p2, string p3, string p4);
	[CCode (cname = "XOpenOM", cheader_filename = "X11/X.h")]
	public static weak X.OM XOpenOM (X.Display p1, void* p2, string p3, string p4);
	[CCode (cname = "XParseColor", cheader_filename = "X11/X.h")]
	public static int XParseColor (X.Display p1, X.Colormap p2, string p3, X.Color p4);
	[CCode (cname = "XParseGeometry", cheader_filename = "X11/X.h")]
	public static int XParseGeometry (string p1, int p2, int p3, uint p4, uint p5);
	[CCode (cname = "XPeekEvent", cheader_filename = "X11/X.h")]
	public static int XPeekEvent (X.Display p1, X.Event p2);
	[CCode (cname = "XPeekIfEvent", cheader_filename = "X11/X.h")]
	public static int XPeekIfEvent (X.Display p1, X.Event p2, GLib.Callback p3, X.Pointer p4);
	[CCode (cname = "XPending", cheader_filename = "X11/X.h")]
	public static int XPending (X.Display p1);
	[CCode (cname = "XPlanesOfScreen", cheader_filename = "X11/X.h")]
	public static int XPlanesOfScreen (X.Screen p1);
	[CCode (cname = "XPointInRegion", cheader_filename = "X11/X.h")]
	public static int XPointInRegion (X.Region p1, int p2, int p3);
	[CCode (cname = "XPolygonRegion", cheader_filename = "X11/X.h")]
	public static weak X.Region XPolygonRegion (X.Point p1, int p2, int p3);
	[CCode (cname = "XProcessInternalConnection", cheader_filename = "X11/X.h")]
	public static void XProcessInternalConnection (X.Display p1, int p2);
	[CCode (cname = "XProtocolRevision", cheader_filename = "X11/X.h")]
	public static int XProtocolRevision (X.Display p1);
	[CCode (cname = "XProtocolVersion", cheader_filename = "X11/X.h")]
	public static int XProtocolVersion (X.Display p1);
	[CCode (cname = "XPutBackEvent", cheader_filename = "X11/X.h")]
	public static int XPutBackEvent (X.Display p1, X.Event p2);
	[CCode (cname = "XPutImage", cheader_filename = "X11/X.h")]
	public static int XPutImage (X.Display p1, X.Drawable p2, int p3, X.Image p4, int p5, int p6, int p7, int p8, uint p9, uint p10);
	[CCode (cname = "XQLength", cheader_filename = "X11/X.h")]
	public static int XQLength (X.Display p1);
	[CCode (cname = "XQueryBestCursor", cheader_filename = "X11/X.h")]
	public static int XQueryBestCursor (X.Display p1, X.Drawable p2, uint p3, uint p4, uint p5, uint p6);
	[CCode (cname = "XQueryBestSize", cheader_filename = "X11/X.h")]
	public static int XQueryBestSize (X.Display p1, int p2, X.Drawable p3, uint p4, uint p5, uint p6, uint p7);
	[CCode (cname = "XQueryBestStipple", cheader_filename = "X11/X.h")]
	public static int XQueryBestStipple (X.Display p1, X.Drawable p2, uint p3, uint p4, uint p5, uint p6);
	[CCode (cname = "XQueryBestTile", cheader_filename = "X11/X.h")]
	public static int XQueryBestTile (X.Display p1, X.Drawable p2, uint p3, uint p4, uint p5, uint p6);
	[CCode (cname = "XQueryColor", cheader_filename = "X11/X.h")]
	public static int XQueryColor (X.Display p1, X.Colormap p2, X.Color p3);
	[CCode (cname = "XQueryColors", cheader_filename = "X11/X.h")]
	public static int XQueryColors (X.Display p1, X.Colormap p2, X.Color p3, int p4);
	[CCode (cname = "XQueryExtension", cheader_filename = "X11/X.h")]
	public static int XQueryExtension (X.Display p1, string p2, int p3, int p4, int p5);
	[CCode (cname = "XQueryFont", cheader_filename = "X11/X.h")]
	public static weak X.FontStruct XQueryFont (X.Display p1, X.ID p2);
	[CCode (cname = "XQueryKeymap", cheader_filename = "X11/X.h")]
	public static int XQueryKeymap (X.Display p1, string[] p2);
	[CCode (cname = "XQueryPointer", cheader_filename = "X11/X.h")]
	public static int XQueryPointer (X.Display p1, X.Window p2, X.Window p3, X.Window p4, int p5, int p6, int p7, int p8, uint p9);
	[CCode (cname = "XQueryTextExtents", cheader_filename = "X11/X.h")]
	public static int XQueryTextExtents (X.Display p1, X.ID p2, string p3, int p4, int p5, int p6, int p7, X.CharStruct p8);
	[CCode (cname = "XQueryTextExtents16", cheader_filename = "X11/X.h")]
	public static int XQueryTextExtents16 (X.Display p1, X.ID p2, X.Char2b p3, int p4, int p5, int p6, int p7, X.CharStruct p8);
	[CCode (cname = "XQueryTree", cheader_filename = "X11/X.h")]
	public static int XQueryTree (X.Display p1, X.Window p2, X.Window p3, X.Window p4, out weak X.Window p5, uint p6);
	[CCode (cname = "XRaiseWindow", cheader_filename = "X11/X.h")]
	public static int XRaiseWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XReadBitmapFile", cheader_filename = "X11/X.h")]
	public static int XReadBitmapFile (X.Display p1, X.Drawable p2, string p3, uint p4, uint p5, X.Pixmap p6, int p7, int p8);
	[CCode (cname = "XReadBitmapFileData", cheader_filename = "X11/X.h")]
	public static int XReadBitmapFileData (string p1, uint p2, uint p3, uint p4, int p5, int p6);
	[CCode (cname = "XRebindKeysym", cheader_filename = "X11/X.h")]
	public static int XRebindKeysym (X.Display p1, X.KeySym p2, X.KeySym p3, int p4, uint p5, int p6);
	[CCode (cname = "XRecolorCursor", cheader_filename = "X11/X.h")]
	public static int XRecolorCursor (X.Display p1, X.Cursor p2, X.Color p3, X.Color p4);
	[CCode (cname = "XReconfigureWMWindow", cheader_filename = "X11/X.h")]
	public static int XReconfigureWMWindow (X.Display p1, X.Window p2, int p3, uint p4, X.WindowChanges p5);
	[CCode (cname = "XRectInRegion", cheader_filename = "X11/X.h")]
	public static int XRectInRegion (X.Region p1, int p2, int p3, uint p4, uint p5);
	[CCode (cname = "XRefreshKeyboardMapping", cheader_filename = "X11/X.h")]
	public static int XRefreshKeyboardMapping (X.MappingEvent p1);
	[CCode (cname = "XRegisterIMInstantiateCallback", cheader_filename = "X11/X.h")]
	public static int XRegisterIMInstantiateCallback (X.Display p1, void* p2, string p3, string p4, X.IDProc p5, X.Pointer p6);
	[CCode (cname = "XRemoveConnectionWatch", cheader_filename = "X11/X.h")]
	public static void XRemoveConnectionWatch (X.Display p1, X.ConnectionWatchProc p2, X.Pointer p3);
	[CCode (cname = "XRemoveFromSaveSet", cheader_filename = "X11/X.h")]
	public static int XRemoveFromSaveSet (X.Display p1, X.Window p2);
	[CCode (cname = "XRemoveHost", cheader_filename = "X11/X.h")]
	public static int XRemoveHost (X.Display p1, X.HostAddress p2);
	[CCode (cname = "XRemoveHosts", cheader_filename = "X11/X.h")]
	public static int XRemoveHosts (X.Display p1, X.HostAddress p2, int p3);
	[CCode (cname = "XReparentWindow", cheader_filename = "X11/X.h")]
	public static int XReparentWindow (X.Display p1, X.Window p2, X.Window p3, int p4, int p5);
	[CCode (cname = "XResetScreenSaver", cheader_filename = "X11/X.h")]
	public static int XResetScreenSaver (X.Display p1);
	[CCode (cname = "XResizeWindow", cheader_filename = "X11/X.h")]
	public static int XResizeWindow (X.Display p1, X.Window p2, uint p3, uint p4);
	[CCode (cname = "XResourceManagerString", cheader_filename = "X11/X.h")]
	public static weak string XResourceManagerString (X.Display p1);
	[CCode (cname = "XRestackWindows", cheader_filename = "X11/X.h")]
	public static int XRestackWindows (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XRootWindow", cheader_filename = "X11/X.h")]
	public static weak X.Window XRootWindow (X.Display p1, int p2);
	[CCode (cname = "XRootWindowOfScreen", cheader_filename = "X11/X.h")]
	public static weak X.Window XRootWindowOfScreen (X.Screen p1);
	[CCode (cname = "XRotateBuffers", cheader_filename = "X11/X.h")]
	public static int XRotateBuffers (X.Display p1, int p2);
	[CCode (cname = "XRotateWindowProperties", cheader_filename = "X11/X.h")]
	public static int XRotateWindowProperties (X.Display p1, X.Window p2, X.Atom p3, int p4, int p5);
	[CCode (cname = "XSaveContext", cheader_filename = "X11/X.h")]
	public static int XSaveContext (X.Display p1, X.ID p2, X.Context p3, string p4);
	[CCode (cname = "XScreenCount", cheader_filename = "X11/X.h")]
	public static int XScreenCount (X.Display p1);
	[CCode (cname = "XScreenNumberOfScreen", cheader_filename = "X11/X.h")]
	public static int XScreenNumberOfScreen (X.Screen p1);
	[CCode (cname = "XScreenOfDisplay", cheader_filename = "X11/X.h")]
	public static weak X.Screen XScreenOfDisplay (X.Display p1, int p2);
	[CCode (cname = "XScreenResourceString", cheader_filename = "X11/X.h")]
	public static weak string XScreenResourceString (X.Screen p1);
	[CCode (cname = "XSelectInput", cheader_filename = "X11/X.h")]
	public static int XSelectInput (X.Display p1, X.Window p2, long p3);
	[CCode (cname = "XSendEvent", cheader_filename = "X11/X.h")]
	public static int XSendEvent (X.Display p1, X.Window p2, int p3, long p4, X.Event p5);
	[CCode (cname = "XServerVendor", cheader_filename = "X11/X.h")]
	public static weak string XServerVendor (X.Display p1);
	[CCode (cname = "XSetAccessControl", cheader_filename = "X11/X.h")]
	public static int XSetAccessControl (X.Display p1, int p2);
	[CCode (cname = "XSetAfterFunction", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XSetAfterFunction (X.Display p1, GLib.Callback p2);
	[CCode (cname = "XSetArcMode", cheader_filename = "X11/X.h")]
	public static int XSetArcMode (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetAuthorization", cheader_filename = "X11/X.h")]
	public static void XSetAuthorization (string p1, int p2, string p3, int p4);
	[CCode (cname = "XSetBackground", cheader_filename = "X11/X.h")]
	public static int XSetBackground (X.Display p1, int p2, uint p3);
	[CCode (cname = "XSetClassHint", cheader_filename = "X11/X.h")]
	public static int XSetClassHint (X.Display p1, X.Window p2, X.ClassHint p3);
	[CCode (cname = "XSetClipMask", cheader_filename = "X11/X.h")]
	public static int XSetClipMask (X.Display p1, int p2, X.Pixmap p3);
	[CCode (cname = "XSetClipOrigin", cheader_filename = "X11/X.h")]
	public static int XSetClipOrigin (X.Display p1, int p2, int p3, int p4);
	[CCode (cname = "XSetClipRectangles", cheader_filename = "X11/X.h")]
	public static int XSetClipRectangles (X.Display p1, int p2, int p3, int p4, X.Rectangle p5, int p6, int p7);
	[CCode (cname = "XSetCloseDownMode", cheader_filename = "X11/X.h")]
	public static int XSetCloseDownMode (X.Display p1, int p2);
	[CCode (cname = "XSetCommand", cheader_filename = "X11/X.h")]
	public static int XSetCommand (X.Display p1, X.Window p2, out weak string p3, int p4);
	[CCode (cname = "XSetDashes", cheader_filename = "X11/X.h")]
	public static int XSetDashes (X.Display p1, int p2, int p3, string p4, int p5);
	[CCode (cname = "XSetErrorHandler", cheader_filename = "X11/X.h")]
	public static weak X.ErrorHandler XSetErrorHandler (X.ErrorHandler p1);
	[CCode (cname = "XSetFillRule", cheader_filename = "X11/X.h")]
	public static int XSetFillRule (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetFillStyle", cheader_filename = "X11/X.h")]
	public static int XSetFillStyle (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetFont", cheader_filename = "X11/X.h")]
	public static int XSetFont (X.Display p1, int p2, X.Font p3);
	[CCode (cname = "XSetFontPath", cheader_filename = "X11/X.h")]
	public static int XSetFontPath (X.Display p1, out weak string p2, int p3);
	[CCode (cname = "XSetForeground", cheader_filename = "X11/X.h")]
	public static int XSetForeground (X.Display p1, int p2, uint p3);
	[CCode (cname = "XSetFunction", cheader_filename = "X11/X.h")]
	public static int XSetFunction (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetGraphicsExposures", cheader_filename = "X11/X.h")]
	public static int XSetGraphicsExposures (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetICFocus", cheader_filename = "X11/X.h")]
	public static void XSetICFocus (X.IC p1);
	[CCode (cname = "XSetICValues", cheader_filename = "X11/X.h")]
	public static weak string XSetICValues (X.IC p1);
	[CCode (cname = "XSetIMValues", cheader_filename = "X11/X.h")]
	public static weak string XSetIMValues (X.IM p1);
	[CCode (cname = "XSetIOErrorHandler", cheader_filename = "X11/X.h")]
	public static weak X.IOErrorHandler XSetIOErrorHandler (X.IOErrorHandler p1);
	[CCode (cname = "XSetIconName", cheader_filename = "X11/X.h")]
	public static int XSetIconName (X.Display p1, X.Window p2, string p3);
	[CCode (cname = "XSetIconSizes", cheader_filename = "X11/X.h")]
	public static int XSetIconSizes (X.Display p1, X.Window p2, X.IconSize p3, int p4);
	[CCode (cname = "XSetInputFocus", cheader_filename = "X11/X.h")]
	public static int XSetInputFocus (X.Display p1, X.Window p2, int p3, X.Time p4);
	[CCode (cname = "XSetLineAttributes", cheader_filename = "X11/X.h")]
	public static int XSetLineAttributes (X.Display p1, int p2, uint p3, int p4, int p5, int p6);
	[CCode (cname = "XSetLocaleModifiers", cheader_filename = "X11/X.h")]
	public static weak string XSetLocaleModifiers (string p1);
	[CCode (cname = "XSetModifierMapping", cheader_filename = "X11/X.h")]
	public static int XSetModifierMapping (X.Display p1, X.ModifierKeymap p2);
	[CCode (cname = "XSetNormalHints", cheader_filename = "X11/X.h")]
	public static int XSetNormalHints (X.Display p1, X.Window p2, X.SizeHints p3);
	[CCode (cname = "XSetOCValues", cheader_filename = "X11/X.h")]
	public static weak string XSetOCValues (X.OC p1);
	[CCode (cname = "XSetOMValues", cheader_filename = "X11/X.h")]
	public static weak string XSetOMValues (X.OM p1);
	[CCode (cname = "XSetPlaneMask", cheader_filename = "X11/X.h")]
	public static int XSetPlaneMask (X.Display p1, int p2, uint p3);
	[CCode (cname = "XSetPointerMapping", cheader_filename = "X11/X.h")]
	public static int XSetPointerMapping (X.Display p1, uint p2, int p3);
	[CCode (cname = "XSetRGBColormaps", cheader_filename = "X11/X.h")]
	public static void XSetRGBColormaps (X.Display p1, X.Window p2, X.StandardColormap p3, int p4, X.Atom p5);
	[CCode (cname = "XSetRegion", cheader_filename = "X11/X.h")]
	public static int XSetRegion (X.Display p1, int p2, X.Region p3);
	[CCode (cname = "XSetScreenSaver", cheader_filename = "X11/X.h")]
	public static int XSetScreenSaver (X.Display p1, int p2, int p3, int p4, int p5);
	[CCode (cname = "XSetSelectionOwner", cheader_filename = "X11/X.h")]
	public static int XSetSelectionOwner (X.Display p1, X.Atom p2, X.Window p3, X.Time p4);
	[CCode (cname = "XSetSizeHints", cheader_filename = "X11/X.h")]
	public static int XSetSizeHints (X.Display p1, X.Window p2, X.SizeHints p3, X.Atom p4);
	[CCode (cname = "XSetStandardColormap", cheader_filename = "X11/X.h")]
	public static void XSetStandardColormap (X.Display p1, X.Window p2, X.StandardColormap p3, X.Atom p4);
	[CCode (cname = "XSetStandardProperties", cheader_filename = "X11/X.h")]
	public static int XSetStandardProperties (X.Display p1, X.Window p2, string p3, string p4, X.Pixmap p5, out weak string p6, int p7, X.SizeHints p8);
	[CCode (cname = "XSetState", cheader_filename = "X11/X.h")]
	public static int XSetState (X.Display p1, int p2, uint p3, uint p4, int p5, uint p6);
	[CCode (cname = "XSetStipple", cheader_filename = "X11/X.h")]
	public static int XSetStipple (X.Display p1, int p2, X.Pixmap p3);
	[CCode (cname = "XSetSubwindowMode", cheader_filename = "X11/X.h")]
	public static int XSetSubwindowMode (X.Display p1, int p2, int p3);
	[CCode (cname = "XSetTSOrigin", cheader_filename = "X11/X.h")]
	public static int XSetTSOrigin (X.Display p1, int p2, int p3, int p4);
	[CCode (cname = "XSetTextProperty", cheader_filename = "X11/X.h")]
	public static void XSetTextProperty (X.Display p1, X.Window p2, X.TextProperty p3, X.Atom p4);
	[CCode (cname = "XSetTile", cheader_filename = "X11/X.h")]
	public static int XSetTile (X.Display p1, int p2, X.Pixmap p3);
	[CCode (cname = "XSetTransientForHint", cheader_filename = "X11/X.h")]
	public static int XSetTransientForHint (X.Display p1, X.Window p2, X.Window p3);
	[CCode (cname = "XSetWMClientMachine", cheader_filename = "X11/X.h")]
	public static void XSetWMClientMachine (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XSetWMColormapWindows", cheader_filename = "X11/X.h")]
	public static int XSetWMColormapWindows (X.Display p1, X.Window p2, X.Window p3, int p4);
	[CCode (cname = "XSetWMHints", cheader_filename = "X11/X.h")]
	public static int XSetWMHints (X.Display p1, X.Window p2, X.WMHints p3);
	[CCode (cname = "XSetWMIconName", cheader_filename = "X11/X.h")]
	public static void XSetWMIconName (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XSetWMName", cheader_filename = "X11/X.h")]
	public static void XSetWMName (X.Display p1, X.Window p2, X.TextProperty p3);
	[CCode (cname = "XSetWMNormalHints", cheader_filename = "X11/X.h")]
	public static void XSetWMNormalHints (X.Display p1, X.Window p2, X.SizeHints p3);
	[CCode (cname = "XSetWMProperties", cheader_filename = "X11/X.h")]
	public static void XSetWMProperties (X.Display p1, X.Window p2, X.TextProperty p3, X.TextProperty p4, out weak string p5, int p6, X.SizeHints p7, X.WMHints p8, X.ClassHint p9);
	[CCode (cname = "XSetWMProtocols", cheader_filename = "X11/X.h")]
	public static int XSetWMProtocols (X.Display p1, X.Window p2, X.Atom p3, int p4);
	[CCode (cname = "XSetWMSizeHints", cheader_filename = "X11/X.h")]
	public static void XSetWMSizeHints (X.Display p1, X.Window p2, X.SizeHints p3, X.Atom p4);
	[CCode (cname = "XSetWindowBackground", cheader_filename = "X11/X.h")]
	public static int XSetWindowBackground (X.Display p1, X.Window p2, uint p3);
	[CCode (cname = "XSetWindowBackgroundPixmap", cheader_filename = "X11/X.h")]
	public static int XSetWindowBackgroundPixmap (X.Display p1, X.Window p2, X.Pixmap p3);
	[CCode (cname = "XSetWindowBorder", cheader_filename = "X11/X.h")]
	public static int XSetWindowBorder (X.Display p1, X.Window p2, uint p3);
	[CCode (cname = "XSetWindowBorderPixmap", cheader_filename = "X11/X.h")]
	public static int XSetWindowBorderPixmap (X.Display p1, X.Window p2, X.Pixmap p3);
	[CCode (cname = "XSetWindowBorderWidth", cheader_filename = "X11/X.h")]
	public static int XSetWindowBorderWidth (X.Display p1, X.Window p2, uint p3);
	[CCode (cname = "XSetWindowColormap", cheader_filename = "X11/X.h")]
	public static int XSetWindowColormap (X.Display p1, X.Window p2, X.Colormap p3);
	[CCode (cname = "XSetZoomHints", cheader_filename = "X11/X.h")]
	public static int XSetZoomHints (X.Display p1, X.Window p2, X.SizeHints p3);
	[CCode (cname = "XShrinkRegion", cheader_filename = "X11/X.h")]
	public static int XShrinkRegion (X.Region p1, int p2, int p3);
	[CCode (cname = "XStoreBuffer", cheader_filename = "X11/X.h")]
	public static int XStoreBuffer (X.Display p1, string p2, int p3, int p4);
	[CCode (cname = "XStoreBytes", cheader_filename = "X11/X.h")]
	public static int XStoreBytes (X.Display p1, string p2, int p3);
	[CCode (cname = "XStoreColor", cheader_filename = "X11/X.h")]
	public static int XStoreColor (X.Display p1, X.Colormap p2, X.Color p3);
	[CCode (cname = "XStoreColors", cheader_filename = "X11/X.h")]
	public static int XStoreColors (X.Display p1, X.Colormap p2, X.Color p3, int p4);
	[CCode (cname = "XStoreName", cheader_filename = "X11/X.h")]
	public static int XStoreName (X.Display p1, X.Window p2, string p3);
	[CCode (cname = "XStoreNamedColor", cheader_filename = "X11/X.h")]
	public static int XStoreNamedColor (X.Display p1, X.Colormap p2, string p3, uint p4, int p5);
	[CCode (cname = "XStringListToTextProperty", cheader_filename = "X11/X.h")]
	public static int XStringListToTextProperty (out weak string p1, int p2, X.TextProperty p3);
	[CCode (cname = "XStringToKeysym", cheader_filename = "X11/X.h")]
	public static weak X.KeySym XStringToKeysym (string p1);
	[CCode (cname = "XSubtractRegion", cheader_filename = "X11/X.h")]
	public static int XSubtractRegion (X.Region p1, X.Region p2, X.Region p3);
	[CCode (cname = "XSupportsLocale", cheader_filename = "X11/X.h")]
	public static int XSupportsLocale ();
	[CCode (cname = "XSync", cheader_filename = "X11/X.h")]
	public static int XSync (X.Display p1, int p2);
	[CCode (cname = "XSynchronize", cheader_filename = "X11/X.h")]
	public static weak GLib.Callback XSynchronize (X.Display p1, int p2);
	[CCode (cname = "XTextExtents", cheader_filename = "X11/X.h")]
	public static int XTextExtents (X.FontStruct p1, string p2, int p3, int p4, int p5, int p6, X.CharStruct p7);
	[CCode (cname = "XTextExtents16", cheader_filename = "X11/X.h")]
	public static int XTextExtents16 (X.FontStruct p1, X.Char2b p2, int p3, int p4, int p5, int p6, X.CharStruct p7);
	[CCode (cname = "XTextPropertyToStringList", cheader_filename = "X11/X.h")]
	public static int XTextPropertyToStringList (X.TextProperty p1, out weak string p2, int p3);
	[CCode (cname = "XTextWidth", cheader_filename = "X11/X.h")]
	public static int XTextWidth (X.FontStruct p1, string p2, int p3);
	[CCode (cname = "XTextWidth16", cheader_filename = "X11/X.h")]
	public static int XTextWidth16 (X.FontStruct p1, X.Char2b p2, int p3);
	[CCode (cname = "XTranslateCoordinates", cheader_filename = "X11/X.h")]
	public static int XTranslateCoordinates (X.Display p1, X.Window p2, X.Window p3, int p4, int p5, int p6, int p7, X.Window p8);
	[CCode (cname = "XUndefineCursor", cheader_filename = "X11/X.h")]
	public static int XUndefineCursor (X.Display p1, X.Window p2);
	[CCode (cname = "XUngrabButton", cheader_filename = "X11/X.h")]
	public static int XUngrabButton (X.Display p1, uint p2, uint p3, X.Window p4);
	[CCode (cname = "XUngrabKey", cheader_filename = "X11/X.h")]
	public static int XUngrabKey (X.Display p1, int p2, uint p3, X.Window p4);
	[CCode (cname = "XUngrabKeyboard", cheader_filename = "X11/X.h")]
	public static int XUngrabKeyboard (X.Display p1, X.Time p2);
	[CCode (cname = "XUngrabPointer", cheader_filename = "X11/X.h")]
	public static int XUngrabPointer (X.Display p1, X.Time p2);
	[CCode (cname = "XUngrabServer", cheader_filename = "X11/X.h")]
	public static int XUngrabServer (X.Display p1);
	[CCode (cname = "XUninstallColormap", cheader_filename = "X11/X.h")]
	public static int XUninstallColormap (X.Display p1, X.Colormap p2);
	[CCode (cname = "XUnionRectWithRegion", cheader_filename = "X11/X.h")]
	public static int XUnionRectWithRegion (X.Rectangle p1, X.Region p2, X.Region p3);
	[CCode (cname = "XUnionRegion", cheader_filename = "X11/X.h")]
	public static int XUnionRegion (X.Region p1, X.Region p2, X.Region p3);
	[CCode (cname = "XUnloadFont", cheader_filename = "X11/X.h")]
	public static int XUnloadFont (X.Display p1, X.Font p2);
	[CCode (cname = "XUnlockDisplay", cheader_filename = "X11/X.h")]
	public static void XUnlockDisplay (X.Display p1);
	[CCode (cname = "XUnmapSubwindows", cheader_filename = "X11/X.h")]
	public static int XUnmapSubwindows (X.Display p1, X.Window p2);
	[CCode (cname = "XUnmapWindow", cheader_filename = "X11/X.h")]
	public static int XUnmapWindow (X.Display p1, X.Window p2);
	[CCode (cname = "XUnregisterIMInstantiateCallback", cheader_filename = "X11/X.h")]
	public static int XUnregisterIMInstantiateCallback (X.Display p1, void* p2, string p3, string p4, X.IDProc p5, X.Pointer p6);
	[CCode (cname = "XUnsetICFocus", cheader_filename = "X11/X.h")]
	public static void XUnsetICFocus (X.IC p1);
	[CCode (cname = "XVaCreateNestedList", cheader_filename = "X11/X.h")]
	public static weak X.VaNestedList XVaCreateNestedList (int p1);
	[CCode (cname = "XVendorRelease", cheader_filename = "X11/X.h")]
	public static int XVendorRelease (X.Display p1);
	[CCode (cname = "XVisualIDFromVisual", cheader_filename = "X11/X.h")]
	public static weak X.VisualID XVisualIDFromVisual (X.Visual p1);
	[CCode (cname = "XWMGeometry", cheader_filename = "X11/X.h")]
	public static int XWMGeometry (X.Display p1, int p2, string p3, string p4, uint p5, X.SizeHints p6, int p7, int p8, int p9, int p10, int p11);
	[CCode (cname = "XWarpPointer", cheader_filename = "X11/X.h")]
	public static int XWarpPointer (X.Display p1, X.Window p2, X.Window p3, int p4, int p5, uint p6, uint p7, int p8, int p9);
	[CCode (cname = "XWhitePixel", cheader_filename = "X11/X.h")]
	public static uint XWhitePixel (X.Display p1, int p2);
	[CCode (cname = "XWhitePixelOfScreen", cheader_filename = "X11/X.h")]
	public static uint XWhitePixelOfScreen (X.Screen p1);
	[CCode (cname = "XWidthMMOfScreen", cheader_filename = "X11/X.h")]
	public static int XWidthMMOfScreen (X.Screen p1);
	[CCode (cname = "XWidthOfScreen", cheader_filename = "X11/X.h")]
	public static int XWidthOfScreen (X.Screen p1);
	[CCode (cname = "XWindowEvent", cheader_filename = "X11/X.h")]
	public static int XWindowEvent (X.Display p1, X.Window p2, long p3, X.Event p4);
	[CCode (cname = "XWithdrawWindow", cheader_filename = "X11/X.h")]
	public static int XWithdrawWindow (X.Display p1, X.Window p2, int p3);
	[CCode (cname = "XWriteBitmapFile", cheader_filename = "X11/X.h")]
	public static int XWriteBitmapFile (X.Display p1, string p2, X.Pixmap p3, uint p4, uint p5, int p6, int p7);
	[CCode (cname = "XXorRegion", cheader_filename = "X11/X.h")]
	public static int XXorRegion (X.Region p1, X.Region p2, X.Region p3);
	[CCode (cname = "XcmsAddColorSpace", cheader_filename = "X11/X.h")]
	public static int XcmsAddColorSpace (X.cmsColorSpace p1);
	[CCode (cname = "XcmsAddFunctionSet", cheader_filename = "X11/X.h")]
	public static int XcmsAddFunctionSet (X.cmsFunctionSet p1);
	[CCode (cname = "XcmsAllocColor", cheader_filename = "X11/X.h")]
	public static int XcmsAllocColor (X.Display p1, X.Colormap p2, X.cmsColor p3, X.cmsColorFormat p4);
	[CCode (cname = "XcmsAllocNamedColor", cheader_filename = "X11/X.h")]
	public static int XcmsAllocNamedColor (X.Display p1, X.Colormap p2, string p3, X.cmsColor p4, X.cmsColor p5, X.cmsColorFormat p6);
	[CCode (cname = "XcmsCCCOfColormap", cheader_filename = "X11/X.h")]
	public static weak X.cmsCCC XcmsCCCOfColormap (X.Display p1, X.Colormap p2);
	[CCode (cname = "XcmsCIELabClipL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabClipL (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELabClipLab", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabClipLab (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELabClipab", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabClipab (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELabQueryMaxC", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabQueryMaxC (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELabQueryMaxL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabQueryMaxL (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELabQueryMaxLC", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabQueryMaxLC (X.cmsCCC p1, X.cmsFloat p2, X.cmsColor p3);
	[CCode (cname = "XcmsCIELabQueryMinL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabQueryMinL (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELabToCIEXYZ", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabToCIEXYZ (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIELabWhiteShiftColors", cheader_filename = "X11/X.h")]
	public static int XcmsCIELabWhiteShiftColors (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, X.cmsColorFormat p4, X.cmsColor p5, uint p6, int p7);
	[CCode (cname = "XcmsCIELuvClipL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvClipL (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELuvClipLuv", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvClipLuv (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELuvClipuv", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvClipuv (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsCIELuvQueryMaxC", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvQueryMaxC (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELuvQueryMaxL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvQueryMaxL (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELuvQueryMaxLC", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvQueryMaxLC (X.cmsCCC p1, X.cmsFloat p2, X.cmsColor p3);
	[CCode (cname = "XcmsCIELuvQueryMinL", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvQueryMinL (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsCIELuvToCIEuvY", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvToCIEuvY (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIELuvWhiteShiftColors", cheader_filename = "X11/X.h")]
	public static int XcmsCIELuvWhiteShiftColors (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, X.cmsColorFormat p4, X.cmsColor p5, uint p6, int p7);
	[CCode (cname = "XcmsCIEXYZToCIELab", cheader_filename = "X11/X.h")]
	public static int XcmsCIEXYZToCIELab (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIEXYZToCIEuvY", cheader_filename = "X11/X.h")]
	public static int XcmsCIEXYZToCIEuvY (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIEXYZToCIExyY", cheader_filename = "X11/X.h")]
	public static int XcmsCIEXYZToCIExyY (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIEXYZToRGBi", cheader_filename = "X11/X.h")]
	public static int XcmsCIEXYZToRGBi (X.cmsCCC p1, X.cmsColor p2, uint p3, int p4);
	[CCode (cname = "XcmsCIEuvYToCIELuv", cheader_filename = "X11/X.h")]
	public static int XcmsCIEuvYToCIELuv (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIEuvYToCIEXYZ", cheader_filename = "X11/X.h")]
	public static int XcmsCIEuvYToCIEXYZ (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIEuvYToTekHVC", cheader_filename = "X11/X.h")]
	public static int XcmsCIEuvYToTekHVC (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsCIExyYToCIEXYZ", cheader_filename = "X11/X.h")]
	public static int XcmsCIExyYToCIEXYZ (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsClientWhitePointOfCCC", cheader_filename = "X11/X.h")]
	public static weak X.cmsColor XcmsClientWhitePointOfCCC (X.cmsCCC p1);
	[CCode (cname = "XcmsConvertColors", cheader_filename = "X11/X.h")]
	public static int XcmsConvertColors (X.cmsCCC p1, X.cmsColor p2, uint p3, X.cmsColorFormat p4, int p5);
	[CCode (cname = "XcmsCreateCCC", cheader_filename = "X11/X.h")]
	public static weak X.cmsCCC XcmsCreateCCC (X.Display p1, int p2, X.Visual p3, X.cmsColor p4, X.cmsCompressionProc p5, X.Pointer p6, X.cmsWhiteAdjustProc p7, X.Pointer p8);
	[CCode (cname = "XcmsDefaultCCC", cheader_filename = "X11/X.h")]
	public static weak X.cmsCCC XcmsDefaultCCC (X.Display p1, int p2);
	[CCode (cname = "XcmsDisplayOfCCC", cheader_filename = "X11/X.h")]
	public static weak X.Display XcmsDisplayOfCCC (X.cmsCCC p1);
	[CCode (cname = "XcmsFormatOfPrefix", cheader_filename = "X11/X.h")]
	public static weak X.cmsColorFormat XcmsFormatOfPrefix (string p1);
	[CCode (cname = "XcmsFreeCCC", cheader_filename = "X11/X.h")]
	public static void XcmsFreeCCC (X.cmsCCC p1);
	[CCode (cname = "XcmsLookupColor", cheader_filename = "X11/X.h")]
	public static int XcmsLookupColor (X.Display p1, X.Colormap p2, string p3, X.cmsColor p4, X.cmsColor p5, X.cmsColorFormat p6);
	[CCode (cname = "XcmsPrefixOfFormat", cheader_filename = "X11/X.h")]
	public static weak string XcmsPrefixOfFormat (X.cmsColorFormat p1);
	[CCode (cname = "XcmsQueryBlack", cheader_filename = "X11/X.h")]
	public static int XcmsQueryBlack (X.cmsCCC p1, X.cmsColorFormat p2, X.cmsColor p3);
	[CCode (cname = "XcmsQueryBlue", cheader_filename = "X11/X.h")]
	public static int XcmsQueryBlue (X.cmsCCC p1, X.cmsColorFormat p2, X.cmsColor p3);
	[CCode (cname = "XcmsQueryColor", cheader_filename = "X11/X.h")]
	public static int XcmsQueryColor (X.Display p1, X.Colormap p2, X.cmsColor p3, X.cmsColorFormat p4);
	[CCode (cname = "XcmsQueryColors", cheader_filename = "X11/X.h")]
	public static int XcmsQueryColors (X.Display p1, X.Colormap p2, X.cmsColor p3, uint p4, X.cmsColorFormat p5);
	[CCode (cname = "XcmsQueryGreen", cheader_filename = "X11/X.h")]
	public static int XcmsQueryGreen (X.cmsCCC p1, X.cmsColorFormat p2, X.cmsColor p3);
	[CCode (cname = "XcmsQueryRed", cheader_filename = "X11/X.h")]
	public static int XcmsQueryRed (X.cmsCCC p1, X.cmsColorFormat p2, X.cmsColor p3);
	[CCode (cname = "XcmsQueryWhite", cheader_filename = "X11/X.h")]
	public static int XcmsQueryWhite (X.cmsCCC p1, X.cmsColorFormat p2, X.cmsColor p3);
	[CCode (cname = "XcmsRGBToRGBi", cheader_filename = "X11/X.h")]
	public static int XcmsRGBToRGBi (X.cmsCCC p1, X.cmsColor p2, uint p3, int p4);
	[CCode (cname = "XcmsRGBiToCIEXYZ", cheader_filename = "X11/X.h")]
	public static int XcmsRGBiToCIEXYZ (X.cmsCCC p1, X.cmsColor p2, uint p3, int p4);
	[CCode (cname = "XcmsRGBiToRGB", cheader_filename = "X11/X.h")]
	public static int XcmsRGBiToRGB (X.cmsCCC p1, X.cmsColor p2, uint p3, int p4);
	[CCode (cname = "XcmsScreenNumberOfCCC", cheader_filename = "X11/X.h")]
	public static int XcmsScreenNumberOfCCC (X.cmsCCC p1);
	[CCode (cname = "XcmsScreenWhitePointOfCCC", cheader_filename = "X11/X.h")]
	public static weak X.cmsColor XcmsScreenWhitePointOfCCC (X.cmsCCC p1);
	[CCode (cname = "XcmsSetCCCOfColormap", cheader_filename = "X11/X.h")]
	public static weak X.cmsCCC XcmsSetCCCOfColormap (X.Display p1, X.Colormap p2, X.cmsCCC p3);
	[CCode (cname = "XcmsSetCompressionProc", cheader_filename = "X11/X.h")]
	public static weak X.cmsCompressionProc XcmsSetCompressionProc (X.cmsCCC p1, X.cmsCompressionProc p2, X.Pointer p3);
	[CCode (cname = "XcmsSetWhiteAdjustProc", cheader_filename = "X11/X.h")]
	public static weak X.cmsWhiteAdjustProc XcmsSetWhiteAdjustProc (X.cmsCCC p1, X.cmsWhiteAdjustProc p2, X.Pointer p3);
	[CCode (cname = "XcmsSetWhitePoint", cheader_filename = "X11/X.h")]
	public static int XcmsSetWhitePoint (X.cmsCCC p1, X.cmsColor p2);
	[CCode (cname = "XcmsStoreColor", cheader_filename = "X11/X.h")]
	public static int XcmsStoreColor (X.Display p1, X.Colormap p2, X.cmsColor p3);
	[CCode (cname = "XcmsStoreColors", cheader_filename = "X11/X.h")]
	public static int XcmsStoreColors (X.Display p1, X.Colormap p2, X.cmsColor p3, uint p4, int p5);
	[CCode (cname = "XcmsTekHVCClipC", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCClipC (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsTekHVCClipV", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCClipV (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsTekHVCClipVC", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCClipVC (X.cmsCCC p1, X.cmsColor p2, uint p3, uint p4, int p5);
	[CCode (cname = "XcmsTekHVCQueryMaxC", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCQueryMaxC (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsTekHVCQueryMaxV", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCQueryMaxV (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsTekHVCQueryMaxVC", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCQueryMaxVC (X.cmsCCC p1, X.cmsFloat p2, X.cmsColor p3);
	[CCode (cname = "XcmsTekHVCQueryMaxVSamples", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCQueryMaxVSamples (X.cmsCCC p1, X.cmsFloat p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsTekHVCQueryMinV", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCQueryMinV (X.cmsCCC p1, X.cmsFloat p2, X.cmsFloat p3, X.cmsColor p4);
	[CCode (cname = "XcmsTekHVCToCIEuvY", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCToCIEuvY (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, uint p4);
	[CCode (cname = "XcmsTekHVCWhiteShiftColors", cheader_filename = "X11/X.h")]
	public static int XcmsTekHVCWhiteShiftColors (X.cmsCCC p1, X.cmsColor p2, X.cmsColor p3, X.cmsColorFormat p4, X.cmsColor p5, uint p6, int p7);
	[CCode (cname = "XcmsVisualOfCCC", cheader_filename = "X11/X.h")]
	public static weak X.Visual XcmsVisualOfCCC (X.cmsCCC p1);
	[CCode (cname = "XmbDrawImageString", cheader_filename = "X11/X.h")]
	public static void XmbDrawImageString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, string p7, int p8);
	[CCode (cname = "XmbDrawString", cheader_filename = "X11/X.h")]
	public static void XmbDrawString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, string p7, int p8);
	[CCode (cname = "XmbDrawText", cheader_filename = "X11/X.h")]
	public static void XmbDrawText (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.mbTextItem p6, int p7);
	[CCode (cname = "XmbLookupString", cheader_filename = "X11/X.h")]
	public static int XmbLookupString (X.IC p1, X.KeyPressedEvent p2, string p3, int p4, X.KeySym p5, int p6);
	[CCode (cname = "XmbResetIC", cheader_filename = "X11/X.h")]
	public static weak string XmbResetIC (X.IC p1);
	[CCode (cname = "XmbSetWMProperties", cheader_filename = "X11/X.h")]
	public static void XmbSetWMProperties (X.Display p1, X.Window p2, string p3, string p4, out weak string p5, int p6, X.SizeHints p7, X.WMHints p8, X.ClassHint p9);
	[CCode (cname = "XmbTextEscapement", cheader_filename = "X11/X.h")]
	public static int XmbTextEscapement (X.FontSet p1, string p2, int p3);
	[CCode (cname = "XmbTextExtents", cheader_filename = "X11/X.h")]
	public static int XmbTextExtents (X.FontSet p1, string p2, int p3, X.Rectangle p4, X.Rectangle p5);
	[CCode (cname = "XmbTextListToTextProperty", cheader_filename = "X11/X.h")]
	public static int XmbTextListToTextProperty (X.Display display, out weak string list, int count, X.ICCEncodingStyle style, X.TextProperty text_prop_return);
	[CCode (cname = "XmbTextPerCharExtents", cheader_filename = "X11/X.h")]
	public static int XmbTextPerCharExtents (X.FontSet p1, string p2, int p3, X.Rectangle p4, X.Rectangle p5, int p6, int p7, X.Rectangle p8, X.Rectangle p9);
	[CCode (cname = "XmbTextPropertyToTextList", cheader_filename = "X11/X.h")]
	public static int XmbTextPropertyToTextList (X.Display display, X.TextProperty text_prop, out weak string list_return, int count_return);
	[CCode (cname = "Xpermalloc", cheader_filename = "X11/X.h")]
	public static weak string Xpermalloc (uint p1);
	[CCode (cname = "XrmCombineDatabase", cheader_filename = "X11/X.h")]
	public static void XrmCombineDatabase (X.rmDatabase p1, X.rmDatabase p2, int p3);
	[CCode (cname = "XrmCombineFileDatabase", cheader_filename = "X11/X.h")]
	public static int XrmCombineFileDatabase (string p1, X.rmDatabase p2, int p3);
	[CCode (cname = "XrmDestroyDatabase", cheader_filename = "X11/X.h")]
	public static void XrmDestroyDatabase (X.rmDatabase p1);
	[CCode (cname = "XrmEnumerateDatabase", cheader_filename = "X11/X.h")]
	public static int XrmEnumerateDatabase (X.rmDatabase p1, X.rmNameList p2, X.rmClassList p3, int p4, GLib.Callback p5, X.Pointer p6);
	[CCode (cname = "XrmGetDatabase", cheader_filename = "X11/X.h")]
	public static weak X.rmDatabase XrmGetDatabase (X.Display p1);
	[CCode (cname = "XrmGetFileDatabase", cheader_filename = "X11/X.h")]
	public static weak X.rmDatabase XrmGetFileDatabase (string p1);
	[CCode (cname = "XrmGetResource", cheader_filename = "X11/X.h")]
	public static int XrmGetResource (X.rmDatabase p1, string p2, string p3, out weak string p4, X.rmValue p5);
	[CCode (cname = "XrmGetStringDatabase", cheader_filename = "X11/X.h")]
	public static weak X.rmDatabase XrmGetStringDatabase (string p1);
	[CCode (cname = "XrmInitialize", cheader_filename = "X11/X.h")]
	public static void XrmInitialize ();
	[CCode (cname = "XrmLocaleOfDatabase", cheader_filename = "X11/X.h")]
	public static weak string XrmLocaleOfDatabase (X.rmDatabase p1);
	[CCode (cname = "XrmMergeDatabases", cheader_filename = "X11/X.h")]
	public static void XrmMergeDatabases (X.rmDatabase p1, X.rmDatabase p2);
	[CCode (cname = "XrmParseCommand", cheader_filename = "X11/X.h")]
	public static void XrmParseCommand (X.rmDatabase p1, X.rmOptionDescList p2, int p3, string p4, int p5, out weak string p6);
	[CCode (cname = "XrmPermStringToQuark", cheader_filename = "X11/X.h")]
	public static weak X.rmQuark XrmPermStringToQuark (string p1);
	[CCode (cname = "XrmPutFileDatabase", cheader_filename = "X11/X.h")]
	public static void XrmPutFileDatabase (X.rmDatabase p1, string p2);
	[CCode (cname = "XrmPutLineResource", cheader_filename = "X11/X.h")]
	public static void XrmPutLineResource (X.rmDatabase p1, string p2);
	[CCode (cname = "XrmPutResource", cheader_filename = "X11/X.h")]
	public static void XrmPutResource (X.rmDatabase p1, string p2, string p3, X.rmValue p4);
	[CCode (cname = "XrmPutStringResource", cheader_filename = "X11/X.h")]
	public static void XrmPutStringResource (X.rmDatabase p1, string p2, string p3);
	[CCode (cname = "XrmQGetResource", cheader_filename = "X11/X.h")]
	public static int XrmQGetResource (X.rmDatabase p1, X.rmNameList p2, X.rmClassList p3, X.rmRepresentation p4, X.rmValue p5);
	[CCode (cname = "XrmQGetSearchList", cheader_filename = "X11/X.h")]
	public static int XrmQGetSearchList (X.rmDatabase p1, X.rmNameList p2, X.rmClassList p3, X.rmSearchList p4, int p5);
	[CCode (cname = "XrmQGetSearchResource", cheader_filename = "X11/X.h")]
	public static int XrmQGetSearchResource (X.rmSearchList p1, X.rmName p2, X.rmClass p3, X.rmRepresentation p4, X.rmValue p5);
	[CCode (cname = "XrmQPutResource", cheader_filename = "X11/X.h")]
	public static void XrmQPutResource (X.rmDatabase p1, X.rmBindingList p2, X.rmQuarkList p3, X.rmRepresentation p4, X.rmValue p5);
	[CCode (cname = "XrmQPutStringResource", cheader_filename = "X11/X.h")]
	public static void XrmQPutStringResource (X.rmDatabase p1, X.rmBindingList p2, X.rmQuarkList p3, string p4);
	[CCode (cname = "XrmQuarkToString", cheader_filename = "X11/X.h")]
	public static weak X.rmString XrmQuarkToString (X.rmQuark p1);
	[CCode (cname = "XrmSetDatabase", cheader_filename = "X11/X.h")]
	public static void XrmSetDatabase (X.Display p1, X.rmDatabase p2);
	[CCode (cname = "XrmStringToBindingQuarkList", cheader_filename = "X11/X.h")]
	public static void XrmStringToBindingQuarkList (string p1, X.rmBindingList p2, X.rmQuarkList p3);
	[CCode (cname = "XrmStringToQuark", cheader_filename = "X11/X.h")]
	public static weak X.rmQuark XrmStringToQuark (string p1);
	[CCode (cname = "XrmStringToQuarkList", cheader_filename = "X11/X.h")]
	public static void XrmStringToQuarkList (string p1, X.rmQuarkList p2);
	[CCode (cname = "XrmUniqueQuark", cheader_filename = "X11/X.h")]
	public static weak X.rmQuark XrmUniqueQuark ();
	[CCode (cname = "Xutf8DrawImageString", cheader_filename = "X11/X.h")]
	public static void Xutf8DrawImageString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, string p7, int p8);
	[CCode (cname = "Xutf8DrawString", cheader_filename = "X11/X.h")]
	public static void Xutf8DrawString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, string p7, int p8);
	[CCode (cname = "Xutf8DrawText", cheader_filename = "X11/X.h")]
	public static void Xutf8DrawText (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.mbTextItem p6, int p7);
	[CCode (cname = "Xutf8LookupString", cheader_filename = "X11/X.h")]
	public static int Xutf8LookupString (X.IC p1, X.KeyPressedEvent p2, string p3, int p4, X.KeySym p5, int p6);
	[CCode (cname = "Xutf8ResetIC", cheader_filename = "X11/X.h")]
	public static weak string Xutf8ResetIC (X.IC p1);
	[CCode (cname = "Xutf8SetWMProperties", cheader_filename = "X11/X.h")]
	public static void Xutf8SetWMProperties (X.Display p1, X.Window p2, string p3, string p4, out weak string p5, int p6, X.SizeHints p7, X.WMHints p8, X.ClassHint p9);
	[CCode (cname = "Xutf8TextEscapement", cheader_filename = "X11/X.h")]
	public static int Xutf8TextEscapement (X.FontSet p1, string p2, int p3);
	[CCode (cname = "Xutf8TextExtents", cheader_filename = "X11/X.h")]
	public static int Xutf8TextExtents (X.FontSet p1, string p2, int p3, X.Rectangle p4, X.Rectangle p5);
	[CCode (cname = "Xutf8TextListToTextProperty", cheader_filename = "X11/X.h")]
	public static int Xutf8TextListToTextProperty (X.Display display, out weak string list, int count, X.ICCEncodingStyle style, X.TextProperty text_prop_return);
	[CCode (cname = "Xutf8TextPerCharExtents", cheader_filename = "X11/X.h")]
	public static int Xutf8TextPerCharExtents (X.FontSet p1, string p2, int p3, X.Rectangle p4, X.Rectangle p5, int p6, int p7, X.Rectangle p8, X.Rectangle p9);
	[CCode (cname = "Xutf8TextPropertyToTextList", cheader_filename = "X11/X.h")]
	public static int Xutf8TextPropertyToTextList (X.Display display, X.TextProperty text_prop, out weak string list_return, int count_return);
	[CCode (cname = "XwcDrawImageString", cheader_filename = "X11/X.h")]
	public static void XwcDrawImageString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, ulong p7, int p8);
	[CCode (cname = "XwcDrawString", cheader_filename = "X11/X.h")]
	public static void XwcDrawString (X.Display p1, X.Drawable p2, X.FontSet p3, int p4, int p5, int p6, ulong p7, int p8);
	[CCode (cname = "XwcDrawText", cheader_filename = "X11/X.h")]
	public static void XwcDrawText (X.Display p1, X.Drawable p2, int p3, int p4, int p5, X.wcTextItem p6, int p7);
	[CCode (cname = "XwcFreeStringList", cheader_filename = "X11/X.h")]
	public static void XwcFreeStringList (ulong list);
	[CCode (cname = "XwcLookupString", cheader_filename = "X11/X.h")]
	public static int XwcLookupString (X.IC p1, X.KeyPressedEvent p2, ulong p3, int p4, X.KeySym p5, int p6);
	[CCode (cname = "XwcResetIC", cheader_filename = "X11/X.h")]
	public static ulong XwcResetIC (X.IC p1);
	[CCode (cname = "XwcTextEscapement", cheader_filename = "X11/X.h")]
	public static int XwcTextEscapement (X.FontSet p1, ulong p2, int p3);
	[CCode (cname = "XwcTextExtents", cheader_filename = "X11/X.h")]
	public static int XwcTextExtents (X.FontSet p1, ulong p2, int p3, X.Rectangle p4, X.Rectangle p5);
	[CCode (cname = "XwcTextListToTextProperty", cheader_filename = "X11/X.h")]
	public static int XwcTextListToTextProperty (X.Display display, ulong list, int count, X.ICCEncodingStyle style, X.TextProperty text_prop_return);
	[CCode (cname = "XwcTextPerCharExtents", cheader_filename = "X11/X.h")]
	public static int XwcTextPerCharExtents (X.FontSet p1, ulong p2, int p3, X.Rectangle p4, X.Rectangle p5, int p6, int p7, X.Rectangle p8, X.Rectangle p9);
	[CCode (cname = "XwcTextPropertyToTextList", cheader_filename = "X11/X.h")]
	public static int XwcTextPropertyToTextList (X.Display display, X.TextProperty text_prop, ulong list_return, int count_return);
}
